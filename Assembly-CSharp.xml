<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KSPDocumentation</name>
    </assembly>
    <members>
        <member name="T:PartModule">
            <summary>
            Extending PartModule lets you add new functionality to parts. The main class of many plugins
            will be a subclass of PartModule. See this forum thread for the official instructions on
            using PartModule:
            
            <para>http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource</para>
            </summary>
        </member>
        <member name="M:PartModule.GetInfo">
            <summary>
            The return value of this function appears in the part's description in the editor.
            </summary>
            <returns>Editor info for the part</returns>
        </member>
        <member name="M:PartModule.OnActive">
            <summary>
            This function is called once when the part gets activated.
            </summary>
        </member>
        <member name="M:PartModule.OnAwake">
            <summary>
            This function gets called only once, during the KSP loading screen. See the Unity documentation on Awake for more information.
            </summary>
        </member>
        <member name="M:PartModule.OnFixedUpdate">
            <summary>
            This function gets called once every Unity FixedUpdate cycle (once per physics frame) once the part has been activated. 
            See the Unity documentation on FixedUpdate for more information. You can get the time between FixedUpdates from 
            TimeWarp.fixedDeltaTime. Do any physics stuff in OnFixedUpdate, not OnUpdate.
            </summary>
        </member>
        <member name="M:PartModule.OnInactive">
            <summary>
            When does this get called?
            </summary>
        </member>
        <member name="M:PartModule.OnLoad(ConfigNode)">
            <summary>
            This function is called to initialize the part. The ConfigNode contains the parameters of the module
            as specified in the part.cfg file, or as you last saved them in OnSave. 
            </summary>
            <param name="node">A ConfigNode containing the module's parameters from part.cfg or persistent.sfs</param>
        </member>
        <member name="M:PartModule.OnSave(ConfigNode)">
            <summary>
            This function is called when the game is saved to let the part save persistent data. Add any data you want
            to persist to the ConfigNode. The ConfigNode will then be saved as part of persistent.sfs.
            When the game is resumed, you can then read this data back out in OnLoad.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:PartModule.OnStart(PartModule.StartState)">
            <summary>
            Called when the flight starts, or when the part is created in the editor. OnStart will be called
            before OnUpdate or OnFixedUpdate are ever called.
            </summary>
            <param name="state">Some information about what situation the vessel is starting in.</param>
        </member>
        <member name="M:PartModule.OnUpdate">
            <summary>
            Called once per Unity Update cycle once the part has been activated. See the
            Unity documentation on Update for more information. Poll for user input in OnUpdate, not OnFixedUpdate
            </summary>
        </member>
        <member name="P:PartModule.Actions">
            <summary>
            A list of KSPActions which can be added to action groups.
            </summary>
        </member>
        <member name="P:PartModule.Events">
            <summary>
            A list of KSPEvents, which can be triggered by code or by the user through the part's right-click menu.
            </summary>
        </member>
        <member name="P:PartModule.Fields">
            <summary>
            A list of the KSPFields which the module lods from the part.cfg file.
            </summary>
        </member>
        <member name="P:PartModule.part">
            <summary>
            The Part to which this PartModule is attached. Use this to reference the part from your module code.
            </summary>
        </member>
        <member name="P:PartModule.vessel">
            <summary>
            The Vessel of the Part to which this PartModule is attached.
            </summary>
        </member>
        <member name="T:PartModule.StartState">
            <summary>
            A StartState is passed on OnStart in order to provide the PartModule with some information
            about where it is starting up.
            </summary>
        </member>
        <member name="T:FlightGlobals">
            <summary>
            FlightGlobals contains lists of all CelestialBodies and Vessels in the game. 
            It also provides static utility functions for computing the atmospheric and gravitational properties of CelestialBodies.
            </summary>
        </member>
        <member name="F:FlightGlobals.fetch">
            <summary>
            Use this FlightGlobals instance to access non-static members of FlightGlobals.
            For example, the current target is FlightGlobals.fetch.VesselTarget.
            </summary>
        </member>
        <member name="M:FlightGlobals.getAltitudeAtPos(UnityEngine.Vector3)">
            <summary>
            The altitude above the sea level of the current main body of the given world space position. 
            </summary>
            <param name="position">World space position</param>
            <returns>Altitude above sea level</returns>
        </member>
        <member name="M:FlightGlobals.getAltitudeAtPos(Vector3d)">
            <summary>
            The altitude above the sea level of the current main body of the given world space position. 
            </summary>
            <param name="position">World space position</param>
            <returns>Altitude above sea level</returns>
        </member>
        <member name="M:FlightGlobals.getAltitudeAtPos(Vector3d,CelestialBody)">
            <summary>
            The altitude above the sea level of the given body of the given world space position. 
            </summary>
            <param name="position">World space position</param>
            <param name="body">The body in question</param>
            <returns>Altitude above sea level</returns>
        </member>
        <member name="M:FlightGlobals.getAtmDensity(System.Double)">
            <summary>
            Converts an atmospheric pressure into an atmospheric density. Atmospheric density is what
            appears in the KSP drag equation. This function seems to just multiply the input by 1.2230948554874
            </summary>
            <param name="pressure">Use the output of getStaticPressure</param>
            <returns>An atmospheric density, suitable for use in calculating drag.</returns>
        </member>
        <member name="M:FlightGlobals.getExternalTemperature(Vector3d)">
            <summary>
            Finds the temperature at a given world space position.
            </summary>
            <param name="pos">World space position</param>
            <returns>Temperature</returns>
        </member>
        <member name="M:FlightGlobals.getExternalTemperature(System.Single,CelestialBody)">
            <summary>
            Finds the temperature at a given altitude above a given body.
            </summary>
            <param name="altitude">An altitude (in meters?)</param>
            <param name="body">The body of interest</param>
            <returns>Temperture</returns>
        </member>
        <member name="M:FlightGlobals.getGeeForceAtPosition(Vector3d)">
            <summary>
            Returns the gravitational *acceleration* vector at a given position.
            Contrary to its name, it does *not* return force.
            </summary>
            <param name="pos">World space position</param>
            <returns>Gravitational acceleration vector</returns>
        </member>
        <member name="M:FlightGlobals.getMainBody">
            <summary>
            Returns the current dominant body?
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlightGlobals.getMainBody(Vector3d)">
            <summary>
            Returns the body whose sphere of influence contains a given position?
            </summary>
            <param name="refPos">World space position?</param>
            <returns></returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure">
            <summary>
            Returns the current atmospheric pressure?
            </summary>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure(Vector3d)">
            <summary>
            Returns the atmospheric pressure at a given position. Feed the output of this
            function into getAtmDensity to get the atmopsheric density.
            </summary>
            <param name="position">World space position</param>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure(System.Double,CelestialBody)">
            <summary>
            Returns the atmospheric pressure at a given altitude above a given body
            </summary>
            <param name="altitude">Altitude in meters?</param>
            <param name="body">The body in question</param>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure(Vector3d,CelestialBody)">
            <summary>
            Returns the atmospheric pressure of a given body's atmopshere at a given position
            </summary>
            <param name="position">World space position</param>
            <param name="body">The body in question</param>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.SetVesselTarget(ITargetable)">
            <summary>
            Sets the currently selected target vessel, celestial body, or docking node
            </summary>
            <param name="tgt">The Vessel, CelestialBody, or ModuleDockingNode to target</param>
        </member>
        <member name="P:FlightGlobals.ActiveVessel">
            <summary>
            The vessel the player is currently controlling.
            </summary>
        </member>
        <member name="P:FlightGlobals.Bodies">
            <summary>
            A list of all CelestialBodies in the universe. Contents in 0.18.2: 
            <para>Bodies[0] = Sun</para>
            <para>Bodies[1] = Kerbin</para>
            <para>Bodies[2] = Mun</para>
            <para>Bodies[3] = Minmus</para>
            <para>Bodies[4] = Moho</para>
            <para>Bodies[5] = Eve</para>
            <para>Bodies[6] = Dun</para>
            <para>Bodies[7] = Ike</para>
            <para>Bodies[8] = Jool</para>
            <para>Bodies[9] = Laythe</para>
            <para>Bodies[10] = Vall</para>
            <para>Bodies[11] = Bop</para>
            <para>Bodies[12] = Tylo</para>
            <para>Bodies[13] = Gilly</para>
            <para>Bodies[14] = Pol</para>
            <para>Bodies[15] = Dres</para>
            <para>Bodies[16] = Eeloo</para>
            </summary>
        </member>
        <member name="P:FlightGlobals.DragMultiplier">
            <summary>
            The KSP formula for the drag force on a part is
            (1/2) * DragMultiplier * part.mass * part.mass_drag * airspeed^2
            </summary>
        </member>
        <member name="P:FlightGlobals.RefFrameIsRotating">
            <summary>
            Whether KSP is doing its computations in an inertial reference frame, or the reference frame that 
            rotates with the current dominant celestial body.
            </summary>
        </member>
        <member name="P:FlightGlobals.Vessels">
            <summary>
            A list of all the Vessels that currently exist
            </summary>
        </member>
        <member name="P:FlightGlobals.VesselTarget">
            <summary>
            The currently selected target vessel, celestial body, or docking node. If no target is selected, this is null.
            </summary>
        </member>
        <member name="T:ManeuverNode">
            <summary>
            Represents a maneuver node.
            </summary>
        </member>
        <member name="F:ManeuverNode.DeltaV">
            <summary>
            The delta-V of the burn represented by this maneuver node, in m/s. NOTE: maneuver nodes use a special coordinate system for delta-V.
            The x-component of DeltaV represents the delta-V in the radial-plus direction. The y-component of DeltaV 
            represents the delta-V in the normal-minus direction. The z-component of DeltaV represents the delta-V in the
            prograde direction.
            </summary>
        </member>
        <member name="F:ManeuverNode.nextPatch">
            <summary>
            The orbit patch that starts at this maneuver node.
            </summary>
        </member>
        <member name="F:ManeuverNode.patch">
            <summary>
            The orbit patch that ends at this maneuver node?
            </summary>
        </member>
        <member name="F:ManeuverNode.UT">
            <summary>
            The universal time of the burn represented by this maneuver node.
            </summary>
        </member>
        <member name="M:ManeuverNode.GetBurnVector(Orbit)">
            <summary>
            Perhaps this translates the DeltaV vector into a world-space vector?
            </summary>
            <param name="currentOrbit"></param>
            <returns></returns>
        </member>
        <member name="M:ManeuverNode.OnGizmoUpdated(Vector3d,System.Double)">
            <summary>
            You can call this function to change the delta-V and time of a maneuver node.
            </summary>
            <param name="dV">The new delta-V. See the DeltaV for notes about the coordinate system used.</param>
            <param name="ut">The new universal time.</param>
        </member>
        <member name="T:KSPEvent">
            <summary>
            Apply this attribute to a function in a PartModule to make it callable by the player via
            the right click menu of the part, or from other plugin code via Part.SendEvent.
            </summary>
        </member>
        <member name="F:KSPEvent.active">
            <summary>
            Whether this event can be triggered through Part.SendEvent.
            </summary>
        </member>
        <member name="F:KSPEvent.externalToEVAOnly">
            <summary>
            Whether the event is only available when out on EVA.
            </summary>
        </member>
        <member name="F:KSPEvent.guiActive">
            <summary>
            Whether the event is shown as available in the right click menu (active must also be true).
            </summary>
        </member>
        <member name="F:KSPEvent.guiActiveUnfocused">
            <summary>
            Whether the event is shown as available in the right click menu even when
            the part is on a ship not currently being controlled by the player (but
            close enough to right click).
            </summary>
        </member>
        <member name="F:KSPEvent.guiName">
            <summary>
            The name shown for the event in the right click menu.
            </summary>
        </member>
        <member name="F:KSPEvent.name">
            <summary>
            The name of the event, which can be used to trigger the event using from plugin code using Part.SendEvent.
            </summary>
        </member>
        <member name="F:KSPEvent.unfocusedRange">
            <summary>
            When the part is on a ship not being controlled by the player,
            how close the player needs to be (in meters) in order for the event to appear in the right click menu.
            </summary>
        </member>
        <member name="T:FlightCtrlState">
            <summary>
            A FlightCtrlState is a snapshot of the state of all control inputs to a vessel at a given instant in time.
            See FlightInputHandler.state and Vessel.OnFlyByWire.
            </summary>
        </member>
        <member name="F:FlightCtrlState.fastThrottle">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:FlightCtrlState.gearDown">
            <summary>
            Unused? Landing gear are lowered by sending an Event.
            </summary>
        </member>
        <member name="F:FlightCtrlState.gearUp">
            <summary>
            Unused? Landing gear are raised by sending an Event.
            </summary>
        </member>
        <member name="F:FlightCtrlState.headlight">
            <summary>
            Presumably, whether the EVA headlight is turned on.
            </summary>
        </member>
        <member name="F:FlightCtrlState.killRot">
            <summary>
            Whether SAS is turned on.
            </summary>
        </member>
        <member name="F:FlightCtrlState.mainThrottle">
            <summary>
            The throttle setting; this must be between 0 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.pitch">
            <summary>
            The pitch control input; this must be between -1 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.pitchTrim">
            <summary>
            Presumably, the pitch trim setting, i.e., the pitch input that will
            be given if no other input is given.
            </summary>
        </member>
        <member name="F:FlightCtrlState.roll">
            <summary>
            The roll control input; this must be between -1 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.rollTrim">
            <summary>
            Presumably, the roll trim setting, i.e., the roll input that will
            be given if no other input is given.
            </summary>
        </member>
        <member name="F:FlightCtrlState.X">
            <summary>
            The RCS x-axis control input.
            </summary>
        </member>
        <member name="F:FlightCtrlState.Y">
            <summary>
            The RCS y-axis control input.
            </summary>
        </member>
        <member name="F:FlightCtrlState.yaw">
            <summary>
            The yaw control input; this must be between -1 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.yawTrim">
            <summary>
            Presumably, the yaw trim input; i.e., the yaw input that will be
            given if no other input is given.
            </summary>
        </member>
        <member name="F:FlightCtrlState.Z">
            <summary>
            The RCS z-axis control input.
            </summary>
        </member>
        <member name="M:FlightCtrlState.CopyFrom(FlightCtrlState)">
            <summary>
            Presumably, copies the state of the FlightCtrlState st into this FlightCtrlState object.
            </summary>
            <param name="st"></param>
        </member>
        <member name="P:FlightCtrlState.isNeutral">
            <summary>
            Presumably, whether this flight control represents "neutral" controls, i.e., no input and zero throttle.
            </summary>
        </member>
        <member name="T:ResourceFlowMode">
            <summary>
            An enumeration of the different behaviors resources can have with respect to fuel flow.
            </summary>
        </member>
        <member name="F:ResourceFlowMode.NO_FLOW">
            <summary>
            This resource cannot flow between parts (like SolidFuel).
            </summary>
        </member>
        <member name="F:ResourceFlowMode.ALL_VESSEL">
            <summary>
            This resource can flow between any two parts on the ship
            without restrictions or intermediate fuel lines (like MonoPropellant).
            </summary>
        </member>
        <member name="F:ResourceFlowMode.EVEN_FLOW">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:ResourceFlowMode.STACK_PRIORITY_SEARCH">
            <summary>
            This resource behaves like LiquidFuel or Oxidizer, and can only flow
            through crossfeed-enabled parts and fuel lines.
            </summary>
        </member>
        <member name="T:PlanetariumCamera">
            <summary>
            A class related to the map view camera.
            </summary>
        </member>
        <member name="F:PlanetariumCamera.fetch">
            <summary>
            Use this instance to access non-static members of this class.
            </summary>
        </member>
        <member name="P:PlanetariumCamera.Camera">
            <summary>
            This is the Camera that looks at the planetarium scene. See the Unity documentation on Camera
            to see what you can do with this object.
            </summary>
        </member>
        <member name="T:Planetarium">
            <summary>
            Probably the most useful function here is Planetarium.GetUniversalTime().
            </summary>
        </member>
        <member name="F:Planetarium.CurrentMainBody">
            <summary>
            Presumably, the main body of the active vessel?
            </summary>
        </member>
        <member name="F:Planetarium.fetch">
            <summary>
            Use this instance to access non-static fields.
            </summary>
        </member>
        <member name="F:Planetarium.Sun">
            <summary>
            The CelestialBody representing the Sun.
            </summary>
        </member>
        <member name="M:Planetarium.FrameIsRotating">
            <summary>
            Presumably, whether the game is currently using a rotating
            frame for physics (as opposed to an unrotating inertial frame). 
            Below a certain altitude (CelestialBody.inverseRot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Planetarium.GetUniversalTime">
            <summary>
            The simulation time, in seconds, since this save was started.
            </summary>
            <returns>Universal time, in seconds</returns>
        </member>
        <member name="T:PartResource">
            <summary>
            A PartResource object represents the store of a single type of resource within a Part.
            </summary>
        </member>
        <member name="F:PartResource.amount">
            <summary>
            How much of the resource is in this part, in whatever units the resource uses.
            </summary>
        </member>
        <member name="F:PartResource.info">
            <summary>
            The definition of this type of resource, which contains all information about this resource type.
            </summary>
        </member>
        <member name="F:PartResource.maxAmount">
            <summary>
            The maximum amount of this resource that this part can hold.
            </summary>
        </member>
        <member name="F:PartResource.part">
            <summary>
            The part whose stored resource this object represents
            </summary>
        </member>
        <member name="F:PartResource.resourceName">
            <summary>
            The name of this resource, as a string, e.g. "ElectricCharge"
            </summary>
        </member>
        <member name="T:FuelLine">
            <summary>
            Stock fuel lines are not yet PartModules, but are implemented through this class.
            </summary>
        </member>
        <member name="T:Part">
            <summary>
            Each part on a vessel is represented by a Part object. Plugins can add new functionality to parts by defining new
            PartModules, which can then be added to Parts. It is also possible to define new subclasses of Part, but this
            is deprecated in favor of PartModules.
            </summary>
        </member>
        <member name="F:Part.ActivatesEvenIfDisconnected">
            <summary>
            Whether this part will actually activate if it schedule to be activated in the same stage as it 
            is decoupled from the rocket. In particular, sepratrons must have ActivatesEvenIfDisconnected set
            to true if they are to function properly.
            </summary>
        </member>
        <member name="F:Part.attachNodes">
            <summary>
            An AttachNode represents the link between two attached parts. attachNodes is a list of possible nodes to
            which other parts can be attached to this part. You can find the parts that actually are attached using
            AttachNode.attachedPart. 
            </summary>
        </member>
        <member name="F:Part.children">
            <summary>
            The parts that are children of this part in the part tree (parts that were attached to this part in the editor
            after this part was already part of the vessel).
            </summary>
        </member>
        <member name="F:Part.CrewCapacity">
            <summary>
            How many crew members this part can fit.
            </summary>
        </member>
        <member name="F:Part.dragModel">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:Part.dragModelType">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:Part.fuelCrossFeed">
            <summary>
            Whether this part allows fuel crossfeed.
            </summary>
        </member>
        <member name="F:Part.fuelLookupTargets">
            <summary>
            Seems to be always empty?
            </summary>
        </member>
        <member name="F:Part.inverseStage">
            <summary>
            The stage in which this part will activate, as shown in the staging display. (Possibly called inverseStage
            because the stages in KSP count down instead of up).
            </summary>
        </member>
        <member name="F:Part.mass">
            <summary>
            The DRY mass of this part, not including the mass of any resources it contains
            </summary>
        </member>
        <member name="F:Part.maximum_drag">
            <summary>
            The drag coefficient of this part is equal to (total mass) * (maximum_drag)
            </summary>
        </member>
        <member name="F:Part.maxTemp">
            <summary>
            The temperature at which this part will explode.
            </summary>
        </member>
        <member name="F:Part.minimum_drag">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:Part.NoCrossFeedNodeKey">
            <summary>
            Specifies the name of a node through which this part will NOT draw resources. See the part.cfg of the 
            stock tricoupler for an example of using this to prevent fuel from flowing backwards.
            </summary>
        </member>
        <member name="F:Part.OnEditorAttach">
            <summary>
            Add a function to this callback and it will be called when your part is attached to another part in the editor.
            </summary>
        </member>
        <member name="F:Part.OnEditorDestroy">
            <summary>
            Add a function to this callback and it will be called when your part is deleted in the editor.
            </summary>
        </member>
        <member name="F:Part.OnEditorDetach">
            <summary>
            Add a function to this callback and it will be called when your part is detached, or is part of a set of parts
            that are detached, in the editor.
            </summary>
        </member>
        <member name="F:Part.OnJustAboutToBeDestroyed">
            <summary>
            Add a function to this callback and it will be called when your part is about to be destroyed during flight.
            </summary>
        </member>
        <member name="F:Part.parent">
            <summary>
            The parent of this part in the part tree: the part to which this part was attached in the editor.
            </summary>
        </member>
        <member name="F:Part.partInfo">
            <summary>
            Some of the part info that is displayed about this part in the editor.
            </summary>
        </member>
        <member name="F:Part.physicalSignificance">
            <summary>
            If physicalSignificance == Part.PhysicalSignificance.NONE, then this part doesn't actually
            have any physics. In particular, it has no mass, regardless of what its "mass" field is set to, and no drag.
            </summary>
        </member>
        <member name="F:Part.PhysicsSignificance">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:Part.srfAttachNode">
            <summary>
            IF this part is surface-attached to its parent, srfAttachNode is the attach node describing this connection.
            </summary>
        </member>
        <member name="F:Part.stackIcon">
            <summary>
            The sicon shown for this part in the staging display.
            </summary>
        </member>
        <member name="F:Part.temperature">
            <summary>
            The temperature of this part, in some arbitrary units.
            </summary>
        </member>
        <member name="F:Part.vessel">
            <summary>
            The vessel to which this part belongs. Beware that vessel == null in the editor.
            </summary>
        </member>
        <member name="M:Part.AddModule(System.String)">
            <summary>
            Add a PartModule to this part. PartModules that are dynamically added to parts and don't exist in the original
            part.cfg will not be properly restored from persistence.
            </summary>
            <param name="moduleName">The class name of the PartModule to add, as a string</param>
            <returns>The added PartModule</returns>
        </member>
        <member name="M:Part.explode">
            <summary>
            Calling this causes the part to explode. But you guessed that, didn't you?
            </summary>
        </member>
        <member name="M:Part.findAttachNode(System.String)">
            <summary>
            Find an AttachNode by its name, as a string.
            </summary>
            <param name="nodeId">The name of the node to search for. The names of nodes are found in the part.cfg. For instance,
            node_stack_top describes a node with name "stack_top."</param>
            <returns>The AttachNode of the given name.</returns>
        </member>
        <member name="M:Part.force_activate">
            <summary>
            Activates the part now, regardless of when it was scheduled to be activated in the staging order.
            </summary>
        </member>
        <member name="M:Part.GetResourceMass">
            <summary>
            The total mass of the resources held by the part. The total mass of the part is <code>mass + GetResourceMass()</code>
            </summary>
            <returns>Total resource mass, in tonnes</returns>
        </member>
        <member name="P:Part.orbit">
            <summary>
            Don't use this; use Vessel.orbit instead.
            </summary>
        </member>
        <member name="P:Part.Resources">
            <summary>
            A list of the resources contained by this part. You can loop over them with
            <code>foreach(PartResource resource in part.Resources) { ... }</code>
            </summary>
        </member>
        <member name="P:Part.Rigidbody">
            <summary>
            The rigidbody of this part. See the Unity documentation on rigidbodies for more information.
            </summary>
        </member>
        <member name="F:Part.PhysicalSignificance.FULL">
            <summary>
            Part is a normal, physics-enabled part.
            </summary>
        </member>
        <member name="F:Part.PhysicalSignificance.NONE">
            <summary>
            Part has no physics, and in particular no mass or drag.
            </summary>
        </member>
        <member name="F:FuelLine.target">
            <summary>
            The part that can draw fuel through this fuel line. This fuel line in turn draws fuel from its parent.
            </summary>
        </member>
        <member name="T:ScreenMessages">
            <summary>
            A class that lets you post temporary messages to the screen. If you use this class your messages will
            automatically have the same style as regular in-game messages.
            </summary>
        </member>
        <member name="F:ScreenMessages.activeMessages">
            <summary>
            The set of currently active screen messages. This is a non-static member, but you can get a
            reference to the ScreenMessages instance via
            <code>ScreenMessages sm = (ScreenMessages)GameObject.FindObjectOfType(typeof(ScreenMessages));</code>
            </summary>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(ScreenMessage)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="msg">The message to post</param>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(System.String)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="message">The message to post.</param>
            <returns>A reference to the posted message</returns>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(System.String,System.Single)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="message">The message to post</param>
            <param name="duration">How long the message should remain on the screen, in seconds.</param>
            <returns>A reference to the posted message</returns>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(System.String,System.Single,ScreenMessageStyle)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="message">The message to post</param>
            <param name="duration">How long the message should remain on the screen, in seconds.</param>
            <param name="style">Which style of screen message to post--for instance, should it by like the warp message, the quicksaving message, etc.</param>
            <returns>A reference to the posted message</returns>
        </member>
        <member name="M:ScreenMessages.RemoveMessage(ScreenMessage)">
            <summary>
            Remove a currently active message from the screen.
            </summary>
            <param name="msg">The message to remove</param>
        </member>
        <member name="T:ScreenMessageStyle">
            <summary>
            An enumeration of the different styles of message you can display.
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.UPPER_CENTER">
            <summary>
            This results in a message in the same font and position as the "Warp = {number}x" message.
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.UPPER_LEFT">
            <summary>
            What sort of message style does this produce?
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.UPPER_RIGHT">
            <summary>
            This results in a message in the same font and position as the "Quicksaving..." message.
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.LOWER_CENTER">
            <summary>
            What sort of message style does this produce?
            </summary>
        </member>
        <member name="T:MapView">
            <summary>
            This class stores some global information related to the map view.
            </summary>
        </member>
        <member name="F:MapView.MapIsEnabled">
            <summary>
            Whether the game is currently in map view or not.
            </summary>
        </member>
        <member name="M:MapView.EnterMapView">
            <summary>
            Calling this function will cause the game to switch to map view from the flight view.
            </summary>
        </member>
        <member name="M:MapView.ExitMapView">
            <summary>
            Calling this function will cause the game to switch to flight view from the map view.
            </summary>
        </member>
        <member name="T:HighLogic">
            <summary>
            This class stores some very high-level information about the current game state.
            </summary>
        </member>
        <member name="F:HighLogic.fetch">
            <summary>
            Use this instance to access non-static members of this class.
            </summary>
        </member>
        <member name="F:HighLogic.LoadedSceneIsEditor">
            <summary>
            Whether the game is currently in the VAB or SPH scenes.
            </summary>
        </member>
        <member name="F:HighLogic.LoadedSceneIsFlight">
            <summary>
            Whether the game is currently in the flight scene.
            </summary>
        </member>
        <member name="P:HighLogic.Skin">
            <summary>
            The GUISkin used by the game. Set GUI.skin = HighLogic.Skin at the start of your GUI function to use it yourself.
            </summary>
        </member>
        <member name="T:ScaledSpace">
            <summary>
            A class that handles the transformations between the scaled-down coordinate system used by the map view and the 
            regular coordinate system used by the main flight view and the physics.
            </summary>
        </member>
        <member name="M:ScaledSpace.LocalToScaledSpace(Vector3d)">
            <summary>
            Convert a position in world coordinates into a position in planetarium coordinates.
            </summary>
            <param name="localSpacePoint">A position in world coordinates</param>
            <returns>The corresponding position in planetarium coordinates</returns>
        </member>
        <member name="M:ScaledSpace.ScaledToLocalSpace(Vector3d)">
            <summary>
            Convert a position in planetarium coordinates into a position in world coordinates.
            </summary>
            <param name="scaledSpacePoint">A position in planetarium coordinates.</param>
            <returns>The corresponding position in world coordinates.</returns>
        </member>
        <member name="P:ScaledSpace.ScaleFactor">
            <summary>
            "Scaled space" is the coordinate system used by the planetarium view. It's the same coordinate system as
            the world coordinates used by the physics, except scaled down by this scale factor.
            </summary>
        </member>
        <member name="T:EditorLogic">
            <summary>
            This class has information about what is going on in the editor. In particular see SortedShipList.
            </summary>
        </member>
        <member name="P:EditorLogic.SortedShipList">
            <summary>
            A list of all parts in the vessel that is being edited.
            </summary>
        </member>
        <member name="T:PartResourceLibrary">
            <summary>
            The PartResourceLibrary lets you retrieve information about a resource type, given its name or integer id.
            </summary>
        </member>
        <member name="M:PartResourceLibrary.GetDefinition(System.Int32)">
            <summary>
            Gets information about a resource, specified by its integer ID.
            </summary>
            <param name="id">The integer ID of the resource</param>
            <returns>A PartResourceDefinition, which contains all the information about the resource</returns>
        </member>
        <member name="M:PartResourceLibrary.GetDefinition(System.String)">
            <summary>
            Gets information about a resource, specified by its name as a string.
            </summary>
            <param name="name">The name of the resource, e.g. "ElectricCharge"</param>
            <returns>A PartResourceDefinition, which contains all the information about the resource</returns>
        </member>
        <member name="P:PartResourceLibrary.Instance">
            <summary>
            Use this instance to access the methods of this class
            </summary>
        </member>
        <member name="T:FlightCamera">
            <summary>
            This class is related to control of the main camera used in the flight scene.
            </summary>
        </member>
        <member name="P:FlightCamera.CamHdg">
            <summary>
            You can set this to change the look direction of the in-flight camera (value is in radians).
            </summary>
        </member>
        <member name="P:FlightCamera.CamPitch">
            <summary>
            You can set this to change the look direction of the in-flight camera (value is in radians).
            </summary>
        </member>
        <member name="T:CelestialBody">
            <summary>
            The Sun, the planets, and the moons are all CelestialBodies.
            </summary>
        </member>
        <member name="F:CelestialBody.angularV">
            <summary>
            The magnitude of the angular velocity of the body's rotation, in radians per second.
            </summary>
        </member>
        <member name="F:CelestialBody.angularVelocity">
            <summary>
            The body's angular velocity vector, in rotations per second. This points along the axis of
            rotation and its magnitude is the rotation rate in radians per second.
            </summary>
        </member>
        <member name="F:CelestialBody.atmosphere">
            <summary>
            Whether this body has an atmosphere
            </summary>
        </member>
        <member name="F:CelestialBody.atmosphereContainsOxygen">
            <summary>
            Presumably, whether jet engines will work in this body's atmosphere
            </summary>
        </member>
        <member name="F:CelestialBody.atmosphereMultiplier">
            <summary>
            Seems to be the pressure of the body's atmosphere at sea level, in units of Kerbin atmospheres at sea level.
            </summary>
        </member>
        <member name="F:CelestialBody.atmosphereScaleHeight">
            <summary>
            The atmosphere's scale height, in KILOMETERS (not meters). The atmospheric pressure at a given altitude
            above sea level is proportional to Math.Exp(-altitude / atmosphereScaleHeight).
            </summary>
        </member>
        <member name="F:CelestialBody.bodyName">
            <summary>
            The name of the body, as a string.
            </summary>
        </member>
        <member name="F:CelestialBody.GeeASL">
            <summary>
            The gravitational acceleration of the body at sea level, in units of gees (1 gee = 9.81 m/s^2)
            </summary>
        </member>
        <member name="F:CelestialBody.gMagnitudeAtCenter">
            <summary>
            The gravitational acceleration (in m/s^2) at a radius r (in m) from the body's center is gMagnitudeAtCenter / r^2
            </summary>
        </member>
        <member name="F:CelestialBody.gravParameter">
            <summary>
            The gravitational parameter GM is the universal gravitational constant G times the mass M of the body. 
            In KSP the gravitational constant G is exactly 6.673 m^3 / (kg s^2), and the body mass is measured in
            kilograms.
            </summary>
        </member>
        <member name="F:CelestialBody.hillSphere">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:CelestialBody.Mass">
            <summary>
            The mass of the body in kilograms. Computed 
            </summary>
        </member>
        <member name="F:CelestialBody.maxAtmosphereAltitude">
            <summary>
            The height of the upper edge of the body's atmosphere, in meters above sea level. It seems
            that the drag force may actually go to exactly zero below this height.
            </summary>
        </member>
        <member name="F:CelestialBody.ocean">
            <summary>
            Whether this planet has an ocean at "sea level"
            </summary>
        </member>
        <member name="F:CelestialBody.orbitingBodies">
            <summary>
            A list of this body's moons (or, in the case of the Sun, a list of the planets).
            </summary>
        </member>
        <member name="F:CelestialBody.pqsController">
            <summary>
            The pqsController computes the terrain of the planet. Note that for the Sun, pqsController = null.
            </summary>
        </member>
        <member name="F:CelestialBody.Radius">
            <summary>
            The radius of the planet in meters. Note that this is only the radius of "sea level"; the actual terrain may be higher.
            </summary>
        </member>
        <member name="F:CelestialBody.rotationPeriod">
            <summary>
            The time, in seconds, for the body to complete one rotation around its axis
            </summary>
        </member>
        <member name="F:CelestialBody.sphereOfInfluence">
            <summary>
            The radius of this body's sphere of influence (measured from the center of the body), in meters.
            </summary>
        </member>
        <member name="F:CelestialBody.tidallyLocked">
            <summary>
            Presumably, whether this body is tidally locked to the body around with it orbits.
            </summary>
        </member>
        <member name="F:CelestialBody.timeWarpAltitudeLimits">
            <summary>
            Presumably, this gives the minimum altitude you must have in order to be allowed to use each
            warp rate when in this body's sphere of influence.
            </summary>
        </member>
        <member name="M:CelestialBody.GetAltitude(Vector3d)">
            <summary>
            Gets the height of a given position above this body's sea level, in meters.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Altitude in meters</returns>
        </member>
        <member name="M:CelestialBody.GetLatitude(Vector3d)">
            <summary>
            Gets the latitude of a given position, in degrees.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Latitude in degrees</returns>
        </member>
        <member name="M:CelestialBody.GetLongitude(Vector3d)">
            <summary>
            Gets the longitude of a given position, in degrees. Note that you CANNOT count on this value being in any particular range.
            This function may for example return 420, meaning 60 degrees east. You would be well advised to coerce it into a standard
            range like -180 to 180 before using it.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Longitude in degrees</returns>
        </member>
        <member name="M:CelestialBody.GetRelSurfacePosition(System.Double,System.Double,System.Double)">
            <summary>
            Returns a vector pointing from the center of the body to the given latitude, longitude, and altitude.
            </summary>
            <param name="lat">Latitude in degrees</param>
            <param name="lon">Longitude in degrees</param>
            <param name="alt">Altitude above sea level in meters</param>
            <returns>A position vector relative to the center of the body</returns>
        </member>
        <member name="M:CelestialBody.getRFrmVel(Vector3d)">
            <summary>
            Returns the velocity at a given position of the frame of reference that rotates with the planet.
            This velocity is the difference between the "orbit" and "surface" velocities.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Velocity of the rotating reference frame</returns>
        </member>
        <member name="M:CelestialBody.GetSurfaceNVector(System.Double,System.Double)">
            <summary>
            Returns a unit vector perpendicular to the surface of the body at the given latitude and
            longitude (pretending for the moment that the body is a perfect sphere).
            </summary>
            <param name="lat">Latitude in degrees</param>
            <param name="lon">Longitude in degrees</param>
            <returns>A unit normal vector to the surface</returns>
        </member>
        <member name="M:CelestialBody.GetWorldSurfacePosition(System.Double,System.Double,System.Double)">
            <summary>
            Returns the position, in world coordinates, of a given latitude, longitude, and altitude
            </summary>
            <param name="lat">Latitude in degrees</param>
            <param name="lon">Longitude in degrees</param>
            <param name="alt">Altitude above sea level in meters</param>
            <returns>Position in world coordinates</returns>
        </member>
        <member name="P:CelestialBody.orbit">
            <summary>
            Describes the orbit of this body around its primary.
            </summary>
        </member>
        <member name="P:CelestialBody.position">
            <summary>
            The position of the center of the body, in world coordinates.
            </summary>
        </member>
        <member name="P:CelestialBody.referenceBody">
            <summary>
            Presumably, the body this body orbits around
            </summary>
        </member>
        <member name="T:TimeWarp">
            <summary>
            The class that handles time warp.
            </summary>
        </member>
        <member name="F:TimeWarp.altitudeLimits">
            <summary>
            Unused? CelestialBodies have their own sets of altitude limits.
            </summary>
        </member>
        <member name="F:TimeWarp.fetch">
            <summary>
            Use this TimeWarp instance to access non-static members. 
            </summary>
        </member>
        <member name="F:TimeWarp.physicsWarpRates">
            <summary>
            The available physics warp rates. In 0.18.2 these are {1, 2, 3, 4} by default. You can modify the
            available rates by modifying this array.
            </summary>
        </member>
        <member name="F:TimeWarp.warpRates">
            <summary>
            The available regular warp rates. In 0.18.2 these are {1, 5, 10, 50, 100, 1000, 10000, 100000} by default.
            You can modify the available rates by modifying this array.
            </summary>
        </member>
        <member name="M:TimeWarp.GetAltitudeLimit(System.Int32,CelestialBody)">
            <summary>
            Presumably, gets the minimum altitude in meters above the sea level of the given body at which the
            given warp rate index is allowed.
            </summary>
            <param name="i">A warp rate index</param>
            <param name="body">The body in question</param>
            <returns>The minimum altitude in meters at which that warp rate index is allowed</returns>
        </member>
        <member name="M:TimeWarp.SetRate(System.Int32,System.Boolean)">
            <summary>
            Changes the warp rate to either warpRates[rateIndex] or physicsWarpRates[rate_index], depending
            on whether WarpMode is HIGH or LOW.
            </summary>
            <param name="rate_index">The index of the desired new warp rate</param>
            <param name="instant">If false, KSP will gradually smoothly adjust the warp rate up or down until it reaches the target.
            If true, the warp rate will change instantly.</param>
        </member>
        <member name="P:TimeWarp.CurrentRate">
            <summary>
            The current warp rate, e.g. 50 if the current warp rate is 50x. This number
            may not be equal to one of the entries in warpRates, because KSP will smoothly
            interpolate between two warp rates over a period of time when you increase
            or decrease the warp.
            </summary>
        </member>
        <member name="P:TimeWarp.CurrentRateIndex">
            <summary>
            The index of the current current warp rate in either warpRates or physicsWarpRates, depending
            on whether WarpMode is HIGH or LOW. Note that CurrentRate may not equal the warp rate indexed
            by CurrentRateIndex if KSP has not finished interpolating the last warp change.
            </summary>
        </member>
        <member name="P:TimeWarp.fixedDeltaTime">
            <summary>
            The time between FixedUpdate cycles (i.e., the time between physics steps). See the Unity FixedUpdate
            documentation for more details.
            </summary>
        </member>
        <member name="P:TimeWarp.WarpMode">
            <summary>
            Whether we are in regular warp mode or physics warp mode
            </summary>
        </member>
        <member name="F:TimeWarp.Modes.HIGH">
            <summary>
            Reguar time warp mode
            </summary>
        </member>
        <member name="F:TimeWarp.Modes.LOW">
            <summary>
            Physics warp mode
            </summary>
        </member>
        <member name="T:PatchedConicSolver">
            <summary>
            Each vessel has a PatchedConicSolver, which stores the predicted patched conics trajectory and
            any maneuver nodes that currently exist.
            </summary>
        </member>
        <member name="F:PatchedConicSolver.maneuverNodes">
            <summary>
            A list of the maneuver nodes that are currently planned for this vessel.
            </summary>
        </member>
        <member name="M:PatchedConicSolver.AddManeuverNode(System.Double)">
            <summary>
            Add a maneuver node to the flight plan.
            </summary>
            <param name="UT">The universal time of the maneuver node.</param>
            <returns>A reference to the maneuver node</returns>
        </member>
        <member name="M:PatchedConicSolver.RemoveManeuverNode(ManeuverNode)">
            <summary>
            Remove a maneuver node from the flight plane.
            </summary>
            <param name="node">The maneuver node to be removed.</param>
        </member>
        <member name="T:Orbit">
            <summary>
            <para>An Orbit class represents a Keplerian orbit. Each Vessel and each CelestialBody has an Orbit. CelestialBodies and
            on-rails Vessels follow their Orbits exactly. Off-rails vessels (the active vessel and any nearby vessels) 
            do not follow their orbits exactly; instead their motion is computed frame-by-frame from the forces acting on them.</para>
            <para>A patched consics trajectory consists of a series of Orbits, called patches.</para>
            </summary>
        </member>
        <member name="F:Orbit.activePatch">
            <summary>
            Whether this patch actually represents a real orbit patch in the projected flight path. Often
            Orbit.nextPatch for the last real will not be null, but will be some sort of bogus Orbit object.
            You can recognize these because activePatch will be false.
            </summary>
        </member>
        <member name="F:Orbit.eccentricity">
            <summary>
            The eccentricity of the orbit.
            </summary>
        </member>
        <member name="F:Orbit.eccVec">
            <summary>
            A vector that points toward periapsis, with mangitude equal to the eccentricity.
            NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have
            to flip these back to get the vectors in world coordinates.
            </summary>
        </member>
        <member name="F:Orbit.EndUT">
            <summary>
            The universal time at which this patch ends.
            </summary>
        </member>
        <member name="F:Orbit.inclination">
            <summary>
            The inclination of this orbit with respect to the equator of the central body (in radians or degrees?)
            </summary>
        </member>
        <member name="F:Orbit.LAN">
            <summary>
            The longitude of the ascending node of the orbit (in what coordinate system?)
            </summary>
        </member>
        <member name="F:Orbit.period">
            <summary>
            The period of the orbit, in seconds.
            </summary>
        </member>
        <member name="F:Orbit.referenceBody">
            <summary>
            The body orbited.
            </summary>
        </member>
        <member name="F:Orbit.semiMajorAxis">
            <summary>
            The semi-major axis of the orbit, in meters. Equal to (PeR + ApR)/2
            </summary>
        </member>
        <member name="F:Orbit.timeToAp">
            <summary>
            The time until the object will reach apoapsis, in seconds.
            </summary>
        </member>
        <member name="F:Orbit.timeToPe">
            <summary>
            The time unti lthe object will reach periapsis, in seconds.
            </summary>
        </member>
        <member name="M:Orbit.GetOrbitNormal">
            <summary>
            A unit vector normal to the plane of the orbit. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have
            to flip these back to get the vectors in world coordinates.
            </summary>
            <returns>A unit normal vector.</returns>
        </member>
        <member name="M:Orbit.getRelativePositionAtUT(System.Double)">
            <summary>
            Gets the predicted displacement of the orbiting object from the center of the main
            body at a given universal time. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have
            to flip these back to get the vectors in world coordinates.
            </summary>
            <param name="UT">A univeral time.</param>
            <returns>Position relative to the main body (YZ flipped)</returns>
        </member>
        <member name="M:Orbit.GetVel">
            <summary>
            The current orbital velocity of the orbiting body. Unlike most other methods of the orbit
            class, the returned vector seems to already be in world coordinates and doesn't need to have
            its Y and Z axes flipped.
            </summary>
            <returns>Orbital velocity vector at current time.</returns>
        </member>
        <member name="M:Orbit.RadiusAtTrueAnomaly(System.Double)">
            <summary>
            The distance the orbiting object will be from the center of the main body when it reaches the given true anomaly.
            </summary>
            <param name="tA">True anomaly (in degrees or radians?)</param>
            <returns>Distance from the main body's center, in meters</returns>
        </member>
        <member name="M:Orbit.TrueAnomalyAtRadius(System.Double)">
            <summary>
            The true anomaly at which the orbiting object will achieve the given distance from the center of the main body.
            </summary>
            <param name="R">Distance from the center of the main body, in meters.</param>
            <returns>True anomaly, in radians.</returns>
        </member>
        <member name="M:Orbit.UpdateFromStateVectors(Vector3d,Vector3d,CelestialBody,System.Double)">
            <summary>
            Updates this orbit to reflect the orbit that will be taken around the given body by an object with the
            given position and velocity at the given universal time.
            </summary>
            <param name="pos">The initial position of the object RELATIVE TO refBody at UT (YZ flipped)</param>
            <param name="vel">The initial velocity of the object (YZ flipped)</param>
            <param name="refBody">The main body</param>
            <param name="UT">The universal time at which to start the orbit.</param>
        </member>
        <member name="P:Orbit.ApA">
            <summary>
            The apoapsis of the orbit in meters, measured from sea level.
            </summary>
        </member>
        <member name="P:Orbit.ApR">
            <summary>
            The apoapsis of the orbit in meters, measured from the center of the main body.
            </summary>
        </member>
        <member name="P:Orbit.PeA">
            <summary>
            The periapsis of the orbit in meters, measured from sea level.
            </summary>
        </member>
        <member name="P:Orbit.PeR">
            <summary>
            The periapsis of the orbit in meters, measured from the center of the main body.
            </summary>
        </member>
        <member name="T:KSPAction">
            <summary>
            Apply this attribute to a function to allow it to be called via action groups.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:KSPAction.actionGroup" -->
        <member name="F:KSPAction.guiName">
            <summary>
            The name of this action as it appears in the action group editor.
            </summary>
        </member>
        <member name="T:KSPField">
            <summary>
            Apply this attribute to a field in a PartModule or ScenarioModule to make the field 
            get automatically initialized from the cfg file, and optionally persistent. See
            
            http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource
            </summary>
        </member>
        <member name="F:KSPField.guiActive">
            <summary>
            Whether to show the value of this field in the right click menu of the part.
            </summary>
        </member>
        <member name="F:KSPField.guiFormat">
            <summary>
            The format string that will be passed to ToString when displaying the value of your field
            in the right click menu of the part?
            E.g. "F3" for a floating point number with 3 digits past the decimal point.
            </summary>
        </member>
        <member name="F:KSPField.guiName">
            <summary>
            The name that will be shown for this field in the right click menu of the part.
            </summary>
        </member>
        <member name="F:KSPField.guiUnits">
            <summary>
            The units that will be shown for this field in the right click menu of the part.
            </summary>
        </member>
        <member name="F:KSPField.isPersistant">
            <summary>
            Whether to store the value of this field in persistent.sfs when the game state is saved, and
            reload it from persistent.sfs when the game state is loaded.
            </summary>
        </member>
        <member name="T:Vessel">
            <summary>
            A Vessel object represents a single vessel. Parts that break off from a vessel become their own Vessels. Vessels that merge
            via docking become one Vessel.
            </summary>
        </member>
        <member name="F:Vessel.acceleration">
            <summary>
            Presumably, this is the current acceleration vector of the vessel, in m/s^2?
            </summary>
        </member>
        <member name="F:Vessel.altitude">
            <summary>
            Presumably, this is the current altitude above sea of the vessel, in meters?
            </summary>
        </member>
        <member name="F:Vessel.angularMomentum">
            <summary>
            Presumably, this is the current angular momentum of the vessel?
            </summary>
        </member>
        <member name="F:Vessel.angularVelocity">
            <summary>
            The current angular velocity vector of the vessel.
            </summary>
        </member>
        <member name="F:Vessel.atmDensity">
            <summary>
            Presumably, this is the current density of the atmosphere at the vessel's position?
            </summary>
        </member>
        <member name="F:Vessel.CoM">
            <summary>
            Presumably, this is the position of the center of mass of the vessel?
            </summary>
        </member>
        <member name="F:Vessel.currentStage">
            <summary>
            Presumably, the current stage of the vessel as seen e.g. in the staging display
            </summary>
        </member>
        <member name="F:Vessel.isEVA">
            <summary>
            Presumably, which this vessel is an EVAing kerbal.
            </summary>
        </member>
        <member name="F:Vessel.Landed">
            <summary>
            Whether the vessel is currently sitting on the ground.
            </summary>
        </member>
        <member name="F:Vessel.latitude">
            <summary>
            Presumably, the current latitude of the vessel in degrees.
            </summary>
        </member>
        <member name="F:Vessel.launchTime">
            <summary>
            The universal time at which the vessel was launched, in seconds?
            </summary>
        </member>
        <member name="F:Vessel.loaded">
            <summary>
            Whether the vessel is currently loaded. Vessels are only loaded when they come
            within about 2.5km of the active vessel.
            </summary>
        </member>
        <member name="F:Vessel.OnFlyByWire">
            <summary>
            You can add your own function to this callback to register a function that can provide flight control input
            to the vessel. Once you've registered this callback, it will be called once per FixedUpdate. Provide flight
            control input by modifying the FlightCtrlState passed to your function. This FlightCtrlState will already
            contain the player's input, which you can modify or override as desired.
            </summary>
            <example>
            <code>
            void MyAutopilotFunction(FlightCtrlState s) {
              s.yaw = 1;
            }
            ...
            vessel.OnFlyByWire += MyAutopilotFunction
            </code>
            This will create an autopilot that always yaws hard to the right. You can probably devise something more useful, though...
            </example>
        </member>
        <member name="F:Vessel.OnJustAboutToBeDestroyed">
            <summary>
            You can add a function to this callback, and the function will be called when the vessel is "just about to be destroyed."
            </summary>
        </member>
        <member name="F:Vessel.packed">
            <summary>
            Whether the vessel is currently packed. Vessels are only packed when the come within about 300m of the active vessel.
            </summary>
        </member>
        <member name="F:Vessel.parts">
            <summary>
            A list of the parts in the vessel. Note that when the vessel is not loaded, this list will be empty.
            </summary>
        </member>
        <member name="F:Vessel.patchedConicSolver">
            <summary>
            Among other things, the patchedConicSolver stores information about the player's current set of maneuver nodes.
            </summary>
        </member>
        <member name="F:Vessel.protoVessel">
            <summary>
            The protoVessel can be used to get some saved information about unloaded vessels.
            </summary>
        </member>
        <member name="F:Vessel.rootPart">
            <summary>
            The root of the tree of parts that comprises the vessel. Usually this is the original command pod placed when constructing the vessel.
            </summary>
        </member>
        <member name="F:Vessel.situation">
            <summary>
            Some coarse information about the current state of the vessel.
            </summary>
        </member>
        <member name="F:Vessel.Splashed">
            <summary>
            Whether the vessel is currently splashed down.
            </summary>
        </member>
        <member name="F:Vessel.srf_velocity">
            <summary>
            Presumably, the velocity of the vessel in the "surface" reference frame.
            </summary>
        </member>
        <member name="F:Vessel.staticPressure">
            <summary>
            Presumably, the atmospheric pressure at the vessel's current location.
            </summary>
        </member>
        <member name="F:Vessel.upAxis">
            <summary>
            Presumably, a unit vector in the up (radially outward from the planet) direction.
            </summary>
        </member>
        <member name="F:Vessel.verticalSpeed">
            <summary>
            Presumably, the vertical speed of the vessel in m/s.
            </summary>
        </member>
        <member name="F:Vessel.vesselName">
            <summary>
            The name of the vessel as it appears in e.g. the tracking station.
            </summary>
        </member>
        <member name="F:Vessel.vesselType">
            <summary>
            The type of the vessel, as shown by the type of icon on the map view.
            </summary>
        </member>
        <member name="M:Vessel.ChangeWorldVelocity(Vector3d)">
            <summary>
            Add a given velocity offset to the vessels current velocity, instantaneously (may only work for loaded vessels?)
            </summary>
            <param name="velOffset"></param>
        </member>
        <member name="M:Vessel.findWorldCenterOfMass">
            <summary>
            Computes and returns the position of the center of mass of the vessel, in world coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vessel.GetCrewCount">
            <summary>
            The number of kerbals inside the vessel. This is ONLY reliable when the vessel is loaded (vessel.loaded == true). 
            When the vessel is unloaded you can compute the crew count as 
            <code>vessel.protoVessel.protoPartSnapshots.Sum(pps => pps.protoModuleCrew.Count))</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vessel.GoOffRails">
            <summary>
            Pulls the vessel off rails?
            </summary>
        </member>
        <member name="M:Vessel.GoOnRails">
            <summary>
            Puts the vessel on rails?
            </summary>
        </member>
        <member name="M:Vessel.SetWorldVelocity(Vector3d)">
            <summary>
            Sets the velocity of the vessel to a new value, instantaneously. May only work for loaded vessels?
            </summary>
            <param name="vel"></param>
        </member>
        <member name="P:Vessel.isActiveVessel">
            <summary>
            Whether the player is currently controlling this vessel.
            </summary>
        </member>
        <member name="P:Vessel.LandedOrSplashed">
            <summary>
            Landed || Splashed; use this to determined whether the vessel is on the ground somewhere, whether on land or water.
            </summary>
        </member>
        <member name="P:Vessel.mainBody">
            <summary>
            The body whose sphere of influence the vessel is currently in.
            </summary>
        </member>
        <member name="P:Vessel.orbit">
            <summary>
            The current orbit of the vessel. 
            </summary>
        </member>
        <member name="P:Vessel.Parts">
            <summary>
            A list of the parts this vessel is composed of.
            </summary>
        </member>
        <member name="P:Vessel.Item(System.Int32)">
            <summary>
            Presumably, this lets you access the vessel's parts by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Vessel.Situations">
            <summary>
            The type of Vessel.situation
            </summary>
        </member>
        <member name="F:Vessel.Situations.PRELAUNCH">
            <summary>
            Waiting on the launchpad, ready to be launched
            </summary>
        </member>
        <member name="F:Vessel.Situations.SUB_ORBITAL">
            <summary>
            On a collision course with the ground
            </summary>
        </member>
        <member name="F:Vessel.Situations.ESCAPING">
            <summary>
            On a hyperbolic trajectory
            </summary>
        </member>
        <member name="T:PartResourceDefinition">
            <summary>
            A PartResourceDefinition contains the basic information defining a type of resource.
            </summary>
        </member>
        <member name="P:PartResourceDefinition.density">
            <summary>
            The mass of this resource, per unit. This is not necessarily per unit volume, as resources
            don't have defined volumes. Instead resource "density" is the mass of one units of the resourc.e
            </summary>
        </member>
        <member name="P:PartResourceDefinition.id">
            <summary>
            The integer ID of this resource type.
            </summary>
        </member>
        <member name="P:PartResourceDefinition.name">
            <summary>
            The string ID of this resource type
            </summary>
        </member>
        <member name="P:PartResourceDefinition.resourceFlowMode">
            <summary>
            How this resource does or does not flow between parts on a ship in response
            to resource requests by engines and the like.
            </summary>
        </member>
        <member name="P:PartResourceDefinition.resourceTransferMode">
            <summary>
            How this resource does or does not flow when using the resource transfer function?
            </summary>
        </member>
        <member name="T:ModuleEngines">
            <summary>
            A PartModule that can be configured to behave like many different kinds of engines. All stock
            propulsion systems except for RCS are implemented through ModuleEngines.
            </summary>
        </member>
        <member name="F:ModuleEngines.atmosphereCurve">
            <summary>
            Represents the specific impulse (Isp) of the engine as a function of altitude. To get
            the Isp at a certain height h (in meters), use <code>atmosphereCurve.Evaluate(h)</code>.
            </summary>
        </member>
        <member name="F:ModuleEngines.engineAccelerationSpeed">
            <summary>
            How quickly the engine spools up? (in what units?)
            </summary>
        </member>
        <member name="F:ModuleEngines.engineDecelerationSpeed">
            <summary>
            How quickly the eninge spools down? (in what units?)
            </summary>
        </member>
        <member name="F:ModuleEngines.EngineIgnited">
            <summary>
            Whether the engine has ever been turned on?
            </summary>
        </member>
        <member name="F:ModuleEngines.exhaustDamage">
            <summary>
            Whether the engine's exhaust will damage parts that it hits. A ray is cast back
            along the engine's thrust vector and if that ray hits a part then that part gets heated
            up, and may explode if it exceeds its maximum temperature.
            </summary>
        </member>
        <member name="F:ModuleEngines.maxThrust">
            <summary>
            The thrust this engine produces at maximum throttle.
            </summary>
        </member>
        <member name="F:ModuleEngines.minThrust">
            <summary>
            The thrust this engine produces at minimum throttle.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ModuleEngines.propellants" -->
        <member name="F:ModuleEngines.realIsp">
            <summary>
            The current specific impulse of this engine, in seconds.
            </summary>
        </member>
        <member name="F:ModuleEngines.throttleLocked">
            <summary>
            Whether this engine always produces maximum thrust once activated (like solid rocket boosters).
            </summary>
        </member>
        <member name="F:ModuleEngines.thrustTransforms">
            <summary>
            These transforms store the locations and directions at which the thrust this engine generates is applied to the part.
            Which component of the transform rotation gives the thrust vector?
            </summary>
        </member>
        <member name="F:ModuleEngines.useVelocityCurve">
            <summary>
            Whether this engine's thrust varies with airspeed?
            </summary>
        </member>
        <member name="F:ModuleEngines.velocityCurve">
            <summary>
            How this engines thrust varies with airspeed?
            </summary>
        </member>
        <member name="P:ModuleEngines.getFlameoutState">
            <summary>
            If this is true, the engine is not producing thrust because it can't get enough resources.
            </summary>
        </member>
        <member name="T:ModuleEngines.Propellant">
            <summary>
            A class that represents the resource requirements of an engine.
            </summary>
        </member>
        <member name="F:ModuleEngines.Propellant.id">
            <summary>
            The integer ID of the resource consumed.
            </summary>
        </member>
        <member name="F:ModuleEngines.Propellant.name">
            <summary>
            The string name of the resource consumed, e.g. "LiquidFuel"
            </summary>
        </member>
        <member name="F:ModuleEngines.Propellant.ratio">
            <summary>
            How much of this resource is consumed by the engine, in proportion to other resources. For example if the
            engine consumes three resources (A, B, C) with A.ratio = 3, B.ratio = 2, C.ratio = 1, then 3 units of every
            will be consumed for every 2 units of B and 1 unit of C.
            </summary>
        </member>
        <member name="T:Vector3d">
            <summary>
            A Vector3d in 3D space.
            Vector3d is just like Unity's Vector3 class, except it uses doubles instead of floats,
            so refer to the Unity documentation on Vector3.
            Vector3d also adds a few functions.
            </summary>
        </member>
        <member name="M:Vector3d.Exclude(Vector3d,Vector3d)">
            <summary>
            Returns <code>fromThat - Vector3d.Project(fromThat, excludeThis)</code>. That is, it removes
            the component of fromThat that is parallel to excludeThis and returns the remainder, which will
            be perpendicular to excludeThis.
            </summary>
            <param name="excludeThis">The direction to exclude from the result.</param>
            <param name="fromThat">The starting vector</param>
            <returns>A vector perpendicular to excludeThis and pointing in the same general direction as fromThat.</returns>
        </member>
        <member name="P:Vector3d.back">
            <summary>
            Minus forward
            </summary>
        </member>
        <member name="P:Vector3d.down">
            <summary>
            Minus up
            </summary>
        </member>
        <member name="P:Vector3d.left">
            <summary>
            Minus right.
            </summary>
        </member>
        <member name="P:Vector3d.xzy">
            <summary>
            Returs a new Vector3d with the y and z coordinates swapped?
            </summary>
        </member>
        <member name="T:FlightInputHandler">
            <summary>
            FlightInputHandler stores some global information about the control of the current active vessel.
            </summary>
        </member>
        <member name="F:FlightInputHandler.fetch">
            <summary>
            Use this FlightInputHandler instance to access non-static members of the class.
            </summary>
        </member>
        <member name="F:FlightInputHandler.precisionMode">
            <summary>
            Presumably, whether precision mode is engaged.
            </summary>
        </member>
        <member name="F:FlightInputHandler.rcslock">
            <summary>
            Whether RCS is enabled.
            </summary>
        </member>
        <member name="F:FlightInputHandler.stageLock">
            <summary>
            Presumably, whether staging has been locked via Alt-L.
            </summary>
        </member>
        <member name="F:FlightInputHandler.state">
            <summary>
            The FlightCtrlState that represents player input. You can change the on-screen throttle
            by setting FlightCtrlState.state.mainThrottle.
            </summary>
        </member>
        <member name="M:FlightInputHandler.SetNeutralControls">
            <summary>
            Call this to set neutral controls; in particular this wil turn off the throttle.
            </summary>
        </member>
        <member name="P:FlightInputHandler.RCSLock">
            <summary>
            Whether RCS is enabled.
            </summary>
        </member>
        <member name="T:KSPDocumentation.AtmosphericEngine">
            <summary>
            The old, deprecated class that implemented jet engine parts before PartModules.
            Use an appropriately configured ModuleEngines instead of this class.
            </summary>
        </member>
        <member name="T:AttachNode">
            <summary>
            An AttachNode represents the physical connection between a Part and its parent Part.
            </summary>
        </member>
        <member name="F:AttachNode.attachedPart">
            <summary>
            The part attached to this node. Null if no part is attached.
            </summary>
        </member>
        <member name="F:AttachNode.nodeType">
            <summary>
            Whether this node is a surface-attach node, a stack node, or a docking node.
            </summary>
        </member>
        <member name="F:AttachNode.NodeType.Stack">
            <summary>
            A stack node, like the connections between stacked fuel tanks
            </summary>
        </member>
        <member name="F:AttachNode.NodeType.Surface">
            <summary>
            A surface node, like the connection between a radial decoupler and its parent.
            </summary>
        </member>
        <member name="F:AttachNode.NodeType.Dock">
            <summary>
            The type of node that connects two docking ports?
            </summary>
        </member>
        <member name="T:AvailablePart">
            <summary>
            An AvailablePart object contains the summary information about a single type of part
            which is shown in the editor.
            </summary>
        </member>
        <member name="F:AvailablePart.category">
            <summary>
            Which tab this part shows up in in the editor.
            </summary>
        </member>
        <member name="F:AvailablePart.cost">
            <summary>
            The cost of this part, as displayed in the editor.
            </summary>
        </member>
        <member name="F:AvailablePart.description">
            <summary>
            The description of this part, as displayed in the editor? 
            Does this include the GetInfo() of the part's PartModules?
            </summary>
        </member>
        <member name="F:AvailablePart.partPrefab">
            <summary>
            The object that gets cloned when you create a new instance of this part in the editor?
            </summary>
        </member>
        <member name="T:Decoupler">
            <summary>
            The old, deprecated class that used to be used to implement decouplers before PartModules.
            Use ModuleDecouple or ModuleAnchoredDecoupler instead.
            </summary>
        </member>
        <member name="T:DecouplerGUI">
            <summary>
            An old, deprecated class that used to be used to implement decouplers before PartModules.
            Use ModuleDecouple or ModuleAnchoredDecoupler instead.
            </summary>
        </member>
        <member name="T:DockingPort">
            <summary>
            An unused class; use ModuleDockingNode instead.
            </summary>
        </member>
        <member name="T:FloatCurve">
            <summary>
            Represents a function of one variable. The function is interpolated from a given set of points,
            and optionally the tangents at those points can be specified.
            </summary>
        </member>
        <member name="M:FloatCurve.Evaluate(System.Single)">
            <summary>
            Evaluate the function at a given value of the input parameter.
            </summary>
            <param name="time">The input parameter (not necessarily a time).</param>
            <returns>The value of the function.</returns>
        </member>
        <member name="T:FuelTank">
            <summary>
            The old, deprecated class that implemented fuel tanks before the resource system.
            Don't use this class: to allow a part to store a resource add a RESOURCE block to the part.cfg.
            </summary>
        </member>
        <member name="T:FuelTankGUI">
            <summary>
            An unused class.
            </summary>
        </member>
        <member name="T:GamePersistence">
            <summary>
            Contains some functions you can call to save the game state to a persistence file, or load the game state from a persistence file.
            </summary>
        </member>
        <member name="M:GamePersistence.SaveGame(System.String,System.String,SaveMode)">
            <summary>
            Creates a persistence file containing the current game state. Probably persistent.sfs and quicksave.sfs are
            generated by calls to this function.
            </summary>
            <param name="saveFileName">The name of the persistence file to create (".sfs" will be appended to the file name).</param>
            <param name="saveFolder">The folder in which to create the save file. Try using HighLogic.SaveFolder.</param>
            <param name="saveMode">Whether to overwrite, append, or abort if the given file already exists?</param>
            <returns>?</returns>
        </member>
        <member name="T:KerbalEVA">
            <summary>
            Kerbals on EVA are represented as vessels with a single part. That part contains a KerbalEVA PartModule.
            </summary>
        </member>
        <member name="P:KerbalEVA.OnALadder">
            <summary>
            Whether the kerbal is currently hanging on to a ladder.
            </summary>
        </member>
        <member name="T:KerbalFSM">
            <summary>
            A finite state machine. States are represented by KFSMState objects, and 
            "events" (transitions between states) are represented by KFSMEvent objects.
            </summary>
        </member>
        <member name="F:KerbalFSM.currentStateName">
            <summary>
            The name of the state the machine is currently in.
            </summary>
        </member>
        <member name="F:KerbalFSM.lastEventName">
            <summary>
            The name of the last event that occurred.
            </summary>
        </member>
        <member name="M:KerbalFSM.AddEvent(KFSMEvent,KFSMState[])">
            <summary>
            Add a new event (possible transition) to the finite state machine.
            </summary>
            <param name="ev">The event to add.</param>
            <param name="toStates">The states to add the event to. The event can only be triggered when
            the machine is in one of these states.</param>
        </member>
        <member name="M:KerbalFSM.AddEventExcluding(KFSMEvent,KFSMState[])">
            <summary>
            Add a new event (possible transition) to the finite state machine.
            </summary>
            <param name="ev">The event to add.</param>
            <param name="excStates">A list of states *not* to add the event to. The event can only be triggered
            when the machine is *not* in one of these states.</param>
        </member>
        <member name="M:KerbalFSM.AddState(KFSMState)">
            <summary>
            Add a new possible state to the machine.
            </summary>
            <param name="st">The state to add.</param>
        </member>
        <member name="M:KerbalFSM.RunEvent(KFSMEvent)">
            <summary>
            Cause the machine to execute the transition specified by evt.
            </summary>
            <param name="evt">The event to execute.</param>
        </member>
        <member name="M:KerbalFSM.StartFSM(KFSMState)">
            <summary>
            Start the state machine in a given initial state.
            </summary>
            <param name="initialState">The state to start in.</param>
        </member>
        <member name="M:KerbalFSM.StartFSM(System.String)">
            <summary>
            Start the state machine in a given initial state.
            </summary>
            <param name="initialStateName">The name of the state to start in</param>
        </member>
        <member name="P:KerbalFSM.CurrentState">
            <summary>
            The state the machine is currently in.
            </summary>
        </member>
        <member name="P:KerbalFSM.FramesInCurrentState">
            <summary>
            How many frames the machine has been in this state.
            </summary>
        </member>
        <member name="P:KerbalFSM.LastEvent">
            <summary>
            The last event that occurred.
            </summary>
        </member>
        <member name="P:KerbalFSM.LastState">
            <summary>
            The state the machine was in before this state.
            </summary>
        </member>
        <member name="P:KerbalFSM.Started">
            <summary>
            Whether the state machine has been started.
            </summary>
        </member>
        <member name="P:KerbalFSM.TimeAtCurrentState">
            <summary>
            How long the machine has been in the current state, in seconds.
            </summary>
        </member>
        <member name="T:KFSMEvent">
            <summary>
            A KFSMEvent represents a possible transition between two KFSMStates in a KerbalFSM
            finite state machine.
            </summary>
        </member>
        <member name="F:KFSMEvent.GoToStateOnEvent">
            <summary>
            Which state to transition to when this event is triggered.
            </summary>
        </member>
        <member name="F:KFSMEvent.name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="F:KFSMEvent.OnCheckCondition">
            <summary>
            You can assign to this field a delegate that takes a KFSMState (the current state)
            and returns a bool. The function will be called each frame and if it returns true,
            the event is triggered.
            </summary>
        </member>
        <member name="F:KFSMEvent.OnEvent">
            <summary>
            You can assign a delegate to this field, and the delegate will be run when the event is triggered.
            </summary>
        </member>
        <member name="F:KFSMEvent.updateMode">
            <summary>
            Specifies when OnCheckCondition should be checked?
            </summary>
        </member>
        <member name="M:KFSMEvent.#ctor(System.String)">
            <summary>
            Creates a new KFSMEvent
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:KFSMEvent.IsValid(KFSMState)">
            <summary>
            Whether this event can be triggered when the state machine is in the given state.
            Events must be added to states through KerbalFSM.AddEvent before they can be triggered,
            and they can only be triggered when the machine is in one of the states to which they
            have been added.
            </summary>
            <param name="state">The state to check.</param>
            <returns>Whether the event can be triggered from the given state.</returns>
        </member>
        <member name="T:KFSMState">
            <summary>
            Represents a state in a KerbalFSM finite state machine.
            </summary>
        </member>
        <member name="F:KFSMState.name">
            <summary>
            The name of this state.
            </summary>
        </member>
        <member name="F:KFSMState.OnEnter">
            <summary>
            You can assign to this field a delegate that takes a KFSMState (which will be this state).
            The delegate will be called when the state machine enters this state.
            </summary>
        </member>
        <member name="F:KFSMState.OnFixedUpdate">
            <summary>
            You can assign a delegate to this field, and the delegate will be called during each FixedUpdate
            while the state machine is in this state.
            </summary>
        </member>
        <member name="F:KFSMState.OnLateUpdate">
            <summary>
            You can assign a delegate to this field, and the delegate will be called during each LateUpdate
            while the state machine is in this state.
            </summary>
        </member>
        <member name="F:KFSMState.OnLeave">
            <summary>
            You can assign to this field a delegate that takes a KFSMState. The delegate will be called
            when the state machine leaves this state, and the argument passed to the delegate will be
            the new state that the machine is transitioning to.
            </summary>
        </member>
        <member name="F:KFSMState.OnUpdate">
            <summary>
            You can assign a delegate to this field, and the delegate will be call during each Update while
            the state machine is in this state.
            </summary>
        </member>
        <member name="M:KFSMState.#ctor(System.String)">
            <summary>
            Create a new KFSMState with a given name.
            </summary>
            <param name="name">The name of the new state.</param>
        </member>
        <member name="M:KFSMState.AddEvent(KFSMEvent)">
            <summary>
            Add an event (possible transition) to this state.
            </summary>
            <param name="ev">The event to add.</param>
        </member>
        <member name="M:KFSMState.IsValid(KFSMEvent)">
            <summary>
            Whether the given event can be triggered from this state. An event must be added to a state before
            it can be triggered from that state.
            </summary>
            <param name="ev">The event to check.</param>
            <returns>Whether the event can be triggered from this state.</returns>
        </member>
        <member name="P:KFSMState.StateEvents">
            <summary>
            The set of events that are valid for this state (i.e., the possible transitions from this state).
            </summary>
        </member>
        <member name="T:KSP.IO.BinaryReader">
            <summary>
            Identical to System.IO.BinaryReader, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.
            </summary>
        </member>
        <member name="M:KSP.IO.BinaryReader.CreateForType``1(System.String,Vessel)">
            <summary>
            Create a binary reader with the desired filename.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.BinaryReader.Dispose">
            <summary>
            Close the stream and any resources (e.g. files) it has open.
            </summary>
        </member>
        <member name="M:KSP.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read a block of chars from the stream.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:KSP.IO.BinaryWriter">
            <summary>
            Identical to System.IO.BinaryWriter, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.
            </summary>
        </member>
        <member name="M:KSP.IO.BinaryWriter.CreateForType``1(System.String,Vessel)">
            <summary>
            Create a binary file writer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.AppendAllText``1(System.String,System.String,Vessel)">
            <summary>
            Append a string to a file, or creates it if it doesn't exist.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="filename"></param>
            <param name="flight"></param>
        </member>
        <member name="M:KSP.IO.File.AppendText``1(System.String,Vessel)">
            <summary>
            Open a stream that appends to a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.Create``1(System.String,Vessel)">
            <summary>
            Open a stream that creates a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.CreateText``1(System.String,Vessel)">
            <summary>
            Open a stream that creates a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.Delete``1(System.String,Vessel)">
            <summary>
            Delete a file in your IO sandbox.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
        </member>
        <member name="M:KSP.IO.File.Exists``1(System.String,Vessel)">
            <summary>
            Find out if a file in your IO sandbox exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.Open``1(System.String,KSP.IO.FileMode,Vessel)">
            <summary>
            Open a stream that operates on a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="mode"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.OpenText``1(System.String,Vessel)">
            <summary>
            Open a stream that operates on a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.OpenWrite``1(System.String,Vessel)">
            <summary>
            Open a stream that writes to a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.ReadAllBytes``1(System.String,Vessel)">
            <summary>
            Read all the bytes from a file in your IO sandbox.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="filename"></param>
            <param name="flight"></param>
        </member>
        <member name="M:KSP.IO.File.ReadAllLines``1(System.String,Vessel)">
            <summary>
            Read all lines from a file in your IO sandbox.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.ReadAllText``1(System.String,Vessel)">
            <summary>
            Read all the text from a file in your IO sandbox.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.File.WriteAllBytes``1(System.Byte[],System.String,Vessel)">
            <summary>
            Write a bunch of bytes to a file on disk
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="filename"></param>
            <param name="flight"></param>
        </member>
        <member name="M:KSP.IO.File.WriteAllLines``1(System.String[],System.String,Vessel)">
            <summary>
            Write an array of strings to a file, with each string becoming a line.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="filename"></param>
            <param name="flight"></param>
        </member>
        <member name="M:KSP.IO.File.WriteAllText``1(System.String,System.String,Vessel)">
            <summary>
            Write a string to a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="filename"></param>
            <param name="flight"></param>
        </member>
        <member name="T:KSP.IO.FileInfo">
            <summary>
            A surrogate for System.IO.FileInfo.
            </summary>
        </member>
        <member name="M:KSP.IO.FileInfo.AppendText">
            <summary>
            Creates a System.IO.StreamWriter that appends text to the file represented by this instance of the System.IO.FileInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destFileName"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destFileName"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.CreateForType``1(System.String,Vessel)">
            <summary>
            Create a text reader stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.CreateText">
            <summary>
            Creates a KSP.IO.TextWriter that writes a new text file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.Decrypt">
            <summary>
            Decrypts a file that was encrypted by the current account using the System.IO.FileInfo.Encrypt() method.
            </summary>
        </member>
        <member name="M:KSP.IO.FileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:KSP.IO.FileInfo.Encrypt">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it.
            </summary>
        </member>
        <member name="M:KSP.IO.FileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destFileName"></param>
        </member>
        <member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode,KSP.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode"></param>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode,KSP.IO.FileAccess,KSP.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.OpenRead">
            <summary>
            Creates a read-only System.IO.FileStream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.OpenText">
            <summary>
            Creates a System.IO.StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.OpenWrite">
            <summary>
            Creates a write-only System.IO.FileStream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.Replace(System.String,System.String)">
            <summary>
            Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="destinationFileName"></param>
            <param name="destinationBackupFileName"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.
            </summary>
            <param name="destinationFileName"></param>
            <param name="destinationBackupFileName"></param>
            <param name="ignoreMetadataErrors"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.FileInfo.ToString">
            <summary>
            Returns the path as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:KSP.IO.FileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:KSP.IO.FileInfo.Exists">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
        </member>
        <member name="P:KSP.IO.FileInfo.IsReadOnly">
            <summary>
            Gets or sets a value that determines if the current file is read only.
            </summary>
        </member>
        <member name="P:KSP.IO.FileInfo.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
        </member>
        <member name="P:KSP.IO.FileInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="T:KSP.IO.IOException">
            <summary>
            A surrogate for System.IO.IOException.
            </summary>
        </member>
        <member name="T:KSP.IO.IOUtils">
            <summary>
            Has some useful little tools and utilities.
            </summary>
        </member>
        <member name="M:KSP.IO.IOUtils.DeserializeFromBinary(System.Byte[])">
            <summary>
            Deserialize a binary serialized object
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.IOUtils.GetFilePathFor(System.Type,System.String,Vessel)">
            <summary>
            Return the full path for a given filename, provided a class from the plugin. 
            <para>PluginData/[.flights/FLIGHT_UUID/]assemblyname/file</para>
            </summary>
            <param name="T"></param>
            <param name="file"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.IOUtils.SerializeToBinary(System.Object)">
            <summary>
            Serialize an object (same as using a BinaryFormatter).
            </summary>
            <param name="something"></param>
            <returns></returns>
        </member>
        <member name="T:KSP.IO.MemoryStream">
            <summary>
            Useful for manipulating bytes in memory.
            </summary>
        </member>
        <member name="T:KSP.IO.PluginConfigNode">
            <summary>
            A node full of configuration values.
            </summary>
        </member>
        <member name="M:KSP.IO.PluginConfigNode.GetParent">
            <summary>
            Gets the parent of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.PluginConfigNode.GetValue``1(System.String)">
            <summary>
            Get the value of a configuration key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.PluginConfigNode.GetValue``1(System.String,``0)">
            <summary>
            Get the value of a configuration key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="_default"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.PluginConfigNode.SetValue(System.String,System.Object)">
            <summary>
            Set the value of a configuration key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:KSP.IO.PluginConfigNode.Item(System.String)">
            <summary>
            Get or set the value of a configuration key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:KSP.IO.PluginConfiguration" -->
        <member name="M:KSP.IO.PluginConfiguration.CreateForType``1(Vessel)">
            <summary>
            Initialize the configuration object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.PluginConfiguration.GetValue``1(System.String)">
            <summary>
            Get a typed value from the root node.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.PluginConfiguration.GetValue``1(System.String,``0)">
            <summary>
            Get a typed value from the root node, and set to a default if it doesn't exist.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="_default"></param>
            <returns></returns>
        </member>
        <member name="M:KSP.IO.PluginConfiguration.load">
            <summary>
            Load from disk
            </summary>
        </member>
        <member name="M:KSP.IO.PluginConfiguration.save">
            <summary>
            Commit changes to disk
            </summary>
        </member>
        <member name="M:KSP.IO.PluginConfiguration.SetValue(System.String,System.Object)">
            <summary>
            Set a configuration key's value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:KSP.IO.PluginConfiguration.Item(System.String)">
            <summary>
            Return configuration key from the root node
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:KSP.IO.SeekOrigin">
            <summary>
            This enum is a replacement for its System.IO equivalent. It's used to determine from where one wishes to seek in a file stream.
            </summary>
        </member>
        <member name="F:KSP.IO.SeekOrigin.Begin">
            <summary>
            Seek from the beginning of the stream.
            </summary>
        </member>
        <member name="F:KSP.IO.SeekOrigin.Current">
            <summary>
            Seek from the current position in the stream.
            </summary>
        </member>
        <member name="F:KSP.IO.SeekOrigin.End">
            <summary>
            Seek from the end of the stream.
            </summary>
        </member>
        <member name="T:KSP.IO.TextReader">
            <summary>
            Identical to System.IO.TextReader, but with added IDisposable methods (for use in using() statements), and a factory method instead of constructors.
            </summary>
        </member>
        <member name="M:KSP.IO.TextReader.CreateForType``1(System.String,Vessel)">
            <summary>
            Create a text reader stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="T:KSP.IO.TextWriter">
            <summary>
            Identical to System.IO.TextWriter, but with added IDisposable methods (for use in using() statements), and a factory method instead of constructors.
            </summary>
        </member>
        <member name="M:KSP.IO.TextWriter.CreateForType``1(System.String,Vessel)">
            <summary>
            Create a text writing stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="flight"></param>
            <returns></returns>
        </member>
        <member name="T:Krakensbane">
            <summary>
            The physics simulation has problems if vessels move too fast relative to 
            the underlying reference frame used by the simulation, or get too far from
            the origin of the coordinate system. Krakensbane shifts the reference frame
            origin and velocity so that the active vessel is always near the origin of,
            and moving slowly with respect to, the underlying coordinate system used by the
            physics simulation.
            </summary>
        </member>
        <member name="M:Krakensbane.GetFrameVelocity">
            <summary>
            Returns the velocity of the Krakensbane velocity frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Krakensbane.GetFrameVelocityV3f">
            <summary>
            Returns the velocity of the Krakensbane velocity frame as a single-precision vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Krakensbane.GetLastCorrection">
            <summary>
            Returns the last velocity correction performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Krakensbane.ResetVelocityFrame">
            <summary>
            sets the frame velocity back to 0m/s. Use this if setting the worldspace velocity of vessels directly.
            </summary>
        </member>
        <member name="M:Krakensbane.setOffset(Vector3d)">
            <summary>
            Moves all vessels not on rails by the given position offset. This will usually only affect the active vessel,
            unless there are other vessels nearby. The offset can be very large and the vessels
            will not break, unlike for Vessel.SetPosition.
            </summary>
            <param name="offset"></param>
        </member>
    </members>
</doc>
