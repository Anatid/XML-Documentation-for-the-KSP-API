<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KSPDocumentation</name>
    </assembly>
    <members>
        <member name="T:PartModule">
            <summary>
            Extending PartModule lets you add new functionality to parts. The main class of many plugins
            will be a subclass of PartModule. See this forum thread for the official instructions on
            using PartModule:
            
            <para>http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource</para>
            </summary>
        </member>
        <member name="M:PartModule.GetInfo">
            <summary>
            The return value of this function appears in the part's description in the editor.
            </summary>
            <returns>Editor info for the part</returns>
        </member>
        <member name="M:PartModule.OnActive">
            <summary>
            This function is called once when the part gets activated.
            </summary>
        </member>
        <member name="M:PartModule.OnAwake">
            <summary>
            This function gets called once when the parts loaded? See the Unity documentation on Awake for more information.
            </summary>
        </member>
        <member name="M:PartModule.OnFixedUpdate">
            <summary>
            This function gets called once every Unity FixedUpdate cycle (once per physics frame) once the part has been activated. 
            See the Unity documentation on FixedUpdate for more information. You can get the time between FixedUpdates from 
            TimeWarp.fixedDeltaTime. Do any physics stuff in OnFixedUpdate, not OnUpdate.
            </summary>
        </member>
        <member name="M:PartModule.OnInactive">
            <summary>
            When does this get called?
            </summary>
        </member>
        <member name="M:PartModule.OnLoad(ConfigNode)">
            <summary>
            This function is called to initialize the part. The ConfigNode contains the parameters of the module
            as specified in the part.cfg file, or as you last saved them in OnSave. 
            </summary>
            <param name="node">A ConfigNode containing the module's parameters from part.cfg or persistent.sfs</param>
        </member>
        <member name="M:PartModule.OnSave(ConfigNode)">
            <summary>
            This function is called when the game is saved to let the part save persistent data. Add any data you want
            to persist to the ConfigNode. The ConfigNode will then be saved as part of persistent.sfs.
            When the game is resumed, you can then read this data back out in OnLoad.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:PartModule.OnStart(PartModule.StartState)">
            <summary>
            Called when the flight starts, or when the part is created in the editor.
            </summary>
            <param name="state">Some information about what situation the vessel is starting in.</param>
        </member>
        <member name="M:PartModule.OnUpdate">
            <summary>
            Called once per Unity Update cycle once the part has been activated. See the
            Unity documentation on Update for more information. Poll for user input in OnUpdate, not OnFixedUpdate
            </summary>
        </member>
        <member name="P:PartModule.Actions">
            <summary>
            A list of KSPActions which can be added to action groups.
            </summary>
        </member>
        <member name="P:PartModule.Events">
            <summary>
            A list of KSPEvents, which can be triggered by code or by the user through the part's right-click menu.
            </summary>
        </member>
        <member name="P:PartModule.Fields">
            <summary>
            A list of the KSPFields which the module lods from the part.cfg file.
            </summary>
        </member>
        <member name="P:PartModule.part">
            <summary>
            The Part to which this PartModule is attached. Use this to reference the part from your module code.
            </summary>
        </member>
        <member name="P:PartModule.vessel">
            <summary>
            The Vessel of the Part to which this PartModule is attached.
            </summary>
        </member>
        <member name="T:PartModule.StartState">
            <summary>
            A StartState is passed on OnStart in order to provide the PartModule with some information
            about where it is starting up.
            </summary>
        </member>
        <member name="T:FlightGlobals">
            <summary>
            FlightGlobals contains lists of all CelestialBodies and Vessels in the game. 
            It also provides static utility functions for computing the atmospheric and gravitational properties of CelestialBodies.
            </summary>
        </member>
        <member name="F:FlightGlobals.fetch">
            <summary>
            Use this FlightGlobals instance to access non-static members of FlightGlobals.
            For example, the current target is FlightGlobals.fetch.VesselTarget.
            </summary>
        </member>
        <member name="M:FlightGlobals.getAltitudeAtPos(UnityEngine.Vector3)">
            <summary>
            The altitude above the sea level of the current main body of the given world space position. 
            </summary>
            <param name="position">World space position</param>
            <returns>Altitude above sea level</returns>
        </member>
        <member name="M:FlightGlobals.getAltitudeAtPos(Vector3d)">
            <summary>
            The altitude above the sea level of the current main body of the given world space position. 
            </summary>
            <param name="position">World space position</param>
            <returns>Altitude above sea level</returns>
        </member>
        <member name="M:FlightGlobals.getAltitudeAtPos(Vector3d,CelestialBody)">
            <summary>
            The altitude above the sea level of the given body of the given world space position. 
            </summary>
            <param name="position">World space position</param>
            <param name="body">The body in question</param>
            <returns>Altitude above sea level</returns>
        </member>
        <member name="M:FlightGlobals.getAtmDensity(System.Double)">
            <summary>
            Converts an atmospheric pressure into an atmospheric density. Atmospheric density is what
            appears in the KSP drag equation. This function seems to just multiply the input by 1.2230948554874
            </summary>
            <param name="pressure">Use the output of getStaticPressure</param>
            <returns>An atmospheric density, suitable for use in calculating drag.</returns>
        </member>
        <member name="M:FlightGlobals.getExternalTemperature(Vector3d)">
            <summary>
            Finds the temperature at a given world space position.
            </summary>
            <param name="pos">World space position</param>
            <returns>Temperature</returns>
        </member>
        <member name="M:FlightGlobals.getExternalTemperature(System.Single,CelestialBody)">
            <summary>
            Finds the temperature at a given altitude above a given body.
            </summary>
            <param name="altitude">An altitude (in meters?)</param>
            <param name="body">The body of interest</param>
            <returns>Temperture</returns>
        </member>
        <member name="M:FlightGlobals.getGeeForceAtPosition(Vector3d)">
            <summary>
            Returns the gravitational *acceleration* vector at a given position.
            Contrary to its name, it does *not* return force.
            </summary>
            <param name="pos">World space position</param>
            <returns>Gravitational acceleration vector</returns>
        </member>
        <member name="M:FlightGlobals.getMainBody">
            <summary>
            Returns the current dominant body?
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlightGlobals.getMainBody(Vector3d)">
            <summary>
            Returns the body whose sphere of influence contains a given position?
            </summary>
            <param name="refPos">World space position?</param>
            <returns></returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure">
            <summary>
            Returns the current atmospheric pressure?
            </summary>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure(Vector3d)">
            <summary>
            Returns the atmospheric pressure at a given position. Feed the output of this
            function into getAtmDensity to get the atmopsheric density.
            </summary>
            <param name="position">World space position</param>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure(System.Double,CelestialBody)">
            <summary>
            Returns the atmospheric pressure at a given altitude above a given body
            </summary>
            <param name="altitude">Altitude in meters?</param>
            <param name="body">The body in question</param>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.getStaticPressure(Vector3d,CelestialBody)">
            <summary>
            Returns the atmospheric pressure of a given body's atmopshere at a given position
            </summary>
            <param name="position">World space position</param>
            <param name="body">The body in question</param>
            <returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns>
        </member>
        <member name="M:FlightGlobals.SetVesselTarget(ITargetable)">
            <summary>
            Sets the currently selected target vessel, celestial body, or docking node
            </summary>
            <param name="tgt">The Vessel, CelestialBody, or ModuleDockingNode to target</param>
        </member>
        <member name="P:FlightGlobals.ActiveVessel">
            <summary>
            The vessel the player is currently controlling.
            </summary>
        </member>
        <member name="P:FlightGlobals.Bodies">
            <summary>
            A list of all CelestialBodies in the universe. Contents in 0.18.2: 
            <para>Bodies[0] = Sun</para>
            <para>Bodies[1] = Kerbin</para>
            <para>Bodies[2] = Mun</para>
            <para>Bodies[3] = Minmus</para>
            <para>Bodies[4] = Moho</para>
            <para>Bodies[5] = Eve</para>
            <para>Bodies[6] = Dun</para>
            <para>Bodies[7] = Ike</para>
            <para>Bodies[8] = Jool</para>
            <para>Bodies[9] = Laythe</para>
            <para>Bodies[10] = Vall</para>
            <para>Bodies[11] = Bop</para>
            <para>Bodies[12] = Tylo</para>
            <para>Bodies[13] = Gilly</para>
            <para>Bodies[14] = Pol</para>
            <para>Bodies[15] = Dres</para>
            <para>Bodies[16] = Eeloo</para>
            </summary>
        </member>
        <member name="P:FlightGlobals.DragMultiplier">
            <summary>
            The KSP formula for the drag force on a part is
            (1/2) * DragMultiplier * part.mass * part.mass_drag * airspeed^2
            </summary>
        </member>
        <member name="P:FlightGlobals.RefFrameIsRotating">
            <summary>
            Whether KSP is doing its computations in an inertial reference frame, or the reference frame that 
            rotates with the current dominant celestial body.
            </summary>
        </member>
        <member name="P:FlightGlobals.Vessels">
            <summary>
            A list of all the Vessels that currently exist
            </summary>
        </member>
        <member name="P:FlightGlobals.VesselTarget">
            <summary>
            The currently selected target vessel, celestial body, or docking node. If no target is selected, this is null.
            </summary>
        </member>
        <member name="F:CelestialBody.angularV">
            <summary>
            The magnitude of the angular velocity of the body's rotation, in radians per second.
            </summary>
        </member>
        <member name="F:CelestialBody.angularVelocity">
            <summary>
            The body's angular velocity vector, in rotations per second. This points along the axis of
            rotation and its magnitude is the rotation rate in radians per second.
            </summary>
        </member>
        <member name="F:CelestialBody.atmosphereMultiplier">
            <summary>
            Seems to be the pressure of the body's atmosphere at sea level, in units of Kerbin atmospheres at sea level.
            </summary>
        </member>
        <member name="F:CelestialBody.atmosphereScaleHeight">
            <summary>
            The atmosphere's scale height, in KILOMETERS (not meters). The atmospheric pressure at a given altitude
            above sea level is proportional to Math.Exp(-altitude / atmosphereScaleHeight).
            </summary>
        </member>
        <member name="F:CelestialBody.bodyName">
            <summary>
            The name of the body, as a string.
            </summary>
        </member>
        <member name="F:CelestialBody.GeeASL">
            <summary>
            The gravitational acceleration of the body at sea level, in units of gees (1 gee = 9.81 m/s^2)
            </summary>
        </member>
        <member name="F:CelestialBody.gMagnitudeAtCenter">
            <summary>
            The gravitational acceleration (in m/s^2) at a radius r (in m) from the body's center is gMagnitudeAtCenter / r^2
            </summary>
        </member>
        <member name="F:CelestialBody.gravParameter">
            <summary>
            The gravitational parameter GM is the universal gravitational constant G times the mass M of the body. 
            In KSP the gravitational constant G is exactly 6.673 m^3 / (kg s^2), and the body mass is measured in
            kilograms.
            </summary>
        </member>
        <member name="F:CelestialBody.Mass">
            <summary>
            The mass of the body in kilograms.
            </summary>
        </member>
        <member name="F:CelestialBody.maxAtmosphereAltitude">
            <summary>
            The height of the upper edge of the body's atmosphere, in meters above sea level. It seems
            that the drag force may actually go to exactly zero below this height.
            </summary>
        </member>
        <member name="F:CelestialBody.orbitingBodies">
            <summary>
            A list of this body's moons (or, in the case of the Sun, a list of the planets).
            </summary>
        </member>
        <member name="F:CelestialBody.pqsController">
            <summary>
            The pqsController computes the terrain of the planet. Note that for the Sun, pqsController = null.
            </summary>
        </member>
        <member name="F:CelestialBody.Radius">
            <summary>
            The radius of the planet in meters. Note that this is only the radius of "sea level"; the actual terrain may be higher.
            </summary>
        </member>
        <member name="F:CelestialBody.timeWarpAltitudeLimits">
            <summary>
            Presumably, this gives the minimum altitude you must have in order to be allowed to use each
            warp rate when in this body's sphere of influence.
            </summary>
        </member>
        <member name="M:CelestialBody.GetAltitude(Vector3d)">
            <summary>
            Gets the height of a given position above this body's sea level, in meters.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Altitude in meters</returns>
        </member>
        <member name="M:CelestialBody.GetLatitude(Vector3d)">
            <summary>
            Gets the latitude of a given position, in degrees.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Latitude in degrees</returns>
        </member>
        <member name="M:CelestialBody.GetLongitude(Vector3d)">
            <summary>
            Gets the longitude of a given position, in degrees. Note that you CANNOT count on this value being in any particular range.
            This function may for example return 420, meaning 60 degrees east. You would be well advised to coerce it into a standard
            range like -180 to 180 before using it.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Longitude in degrees</returns>
        </member>
        <member name="M:CelestialBody.getRFrmVel(Vector3d)">
            <summary>
            Returns the velocity at a given position of the frame of reference that rotates with the planet.
            This velocity is the difference between the "orbit" and "surface" velocities.
            </summary>
            <param name="worldPos">A position in world coordinates</param>
            <returns>Velocity of the rotating reference frame</returns>
        </member>
        <member name="M:CelestialBody.GetSurfaceNVector(System.Double,System.Double)">
            <summary>
            Returns a unit vector perpendicular to the surface of the body at the given latitude and
            longitude (pretending for the moment that the body is a perfect sphere).
            </summary>
            <param name="lat">Latitude in degrees</param>
            <param name="lon">Longitude in degrees</param>
            <returns>A unit normal vector to the surface</returns>
        </member>
        <member name="P:CelestialBody.orbit">
            <summary>
            Describes the orbit of this body around its primary.
            </summary>
        </member>
        <member name="P:CelestialBody.position">
            <summary>
            The position of the center of the body, in world coordinates.
            </summary>
        </member>
        <member name="F:Vessel.acceleration">
            <summary>
            Presumably, this is the current acceleration vector of the vessel, in m/s^2?
            </summary>
        </member>
        <member name="F:Vessel.altitude">
            <summary>
            Presumably, this is the current altitude above sea of the vessel, in meters?
            </summary>
        </member>
        <member name="F:Vessel.angularMomentum">
            <summary>
            Presumably, this is the current angular momentum of the vessel?
            </summary>
        </member>
        <member name="F:Vessel.angularVelocity">
            <summary>
            The current angular velocity vector of the vessel.
            </summary>
        </member>
        <member name="F:Vessel.atmDensity">
            <summary>
            Presumably, this is the current density of the atmosphere at the vessel's position?
            </summary>
        </member>
        <member name="F:Vessel.CoM">
            <summary>
            Presumably, this is the position of the center of mass of the vessel?
            </summary>
        </member>
        <member name="F:Vessel.currentStage">
            <summary>
            Presumably, the current stage of the vessel as seen e.g. in the staging display
            </summary>
        </member>
        <member name="F:Vessel.isEVA">
            <summary>
            Presumably, which this vessel is an EVAing kerbal.
            </summary>
        </member>
        <member name="F:Vessel.Landed">
            <summary>
            Whether the vessel is currently sitting on the ground.
            </summary>
        </member>
        <member name="F:Vessel.latitude">
            <summary>
            Presumably, the current latitude of the vessel in degrees.
            </summary>
        </member>
        <member name="F:Vessel.launchTime">
            <summary>
            The universal time at which the vessel was launched, in seconds?
            </summary>
        </member>
        <member name="F:Vessel.loaded">
            <summary>
            Whether the vessel is currently loaded. Vessels are only loaded when they come
            within about 2.5km of the active vessel.
            </summary>
        </member>
        <member name="F:Vessel.OnFlyByWire">
            <summary>
            You can add your own function to this callback to register a function that can provide flight control input
            to the vessel. Once you've registered this callback, it will be called once per FixedUpdate. Provide flight
            control input by modifying the FlightCtrlState passed to your function. This FlightCtrlState will already
            contain the player's input, which you can modify or override as desired.
            </summary>
            <example>
            <code>
            void MyAutopilotFunction(FlightCtrlState s) {
              s.yaw = 1;
            }
            ...
            vessel.OnFlyByWire += MyAutopilotFunction
            </code>
            This will create an autopilot that always yaws hard to the right. You can probably devise something more useful, though...
            </example>
        </member>
        <member name="F:Vessel.OnJustAboutToBeDestroyed">
            <summary>
            You can add a function to this callback, and the function will be called when the vessel is "just about to be destroyed."
            </summary>
        </member>
        <member name="F:Vessel.packed">
            <summary>
            Whether the vessel is currently packed. Vessels are only packed when the come within about 300m of the active vessel.
            </summary>
        </member>
        <member name="F:Vessel.parts">
            <summary>
            A list of the parts in the vessel. Note that when the vessel is not loaded, this list will be empty.
            </summary>
        </member>
        <member name="F:Vessel.patchedConicSolver">
            <summary>
            Among other things, the patchedConicSolver stores information about the player's current set of maneuver nodes.
            </summary>
        </member>
        <member name="F:Vessel.protoVessel">
            <summary>
            The protoVessel can be used to get some saved information about unloaded vessels.
            </summary>
        </member>
        <member name="F:Vessel.rootPart">
            <summary>
            The root of the tree of parts that comprises the vessel. Usually this is the original command pod placed when constructing the vessel.
            </summary>
        </member>
        <member name="F:Vessel.situation">
            <summary>
            Some coarse information about the current state of the vessel.
            </summary>
        </member>
        <member name="F:Vessel.Splashed">
            <summary>
            Whether the vessel is currently splashed down.
            </summary>
        </member>
        <member name="F:Vessel.srf_velocity">
            <summary>
            Presumably, the velocity of the vessel in the "surface" reference frame.
            </summary>
        </member>
        <member name="F:Vessel.staticPressure">
            <summary>
            Presumably, the atmospheric pressure at the vessel's current location.
            </summary>
        </member>
        <member name="F:Vessel.upAxis">
            <summary>
            Presumably, a unit vector in the up (radially outward from the planet) direction.
            </summary>
        </member>
        <member name="F:Vessel.verticalSpeed">
            <summary>
            Presumably, the vertical speed of the vessel in m/s.
            </summary>
        </member>
        <member name="F:Vessel.vesselName">
            <summary>
            The name of the vessel as it appears in e.g. the tracking station.
            </summary>
        </member>
        <member name="F:Vessel.vesselType">
            <summary>
            The type of the vessel, as shown by the type of icon on the map view.
            </summary>
        </member>
        <member name="M:Vessel.ChangeWorldVelocity(Vector3d)">
            <summary>
            Add a given velocity offset to the vessels current velocity, instantaneously (may only work for loaded vessels?)
            </summary>
            <param name="velOffset"></param>
        </member>
        <member name="M:Vessel.findWorldCenterOfMass">
            <summary>
            Computes and returns the position of the center of mass of the vessel, in world coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vessel.GetCrewCount">
            <summary>
            The number of kerbals inside the vessel. This is ONLY reliable when the vessel is loaded (vessel.loaded == true). 
            When the vessel is unloaded you can compute the crew count as 
            <code>vessel.protoVessel.protoPartSnapshots.Sum(pps => pps.protoModuleCrew.Count))</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vessel.GoOffRails">
            <summary>
            Pulls the vessel off rails?
            </summary>
        </member>
        <member name="M:Vessel.GoOnRails">
            <summary>
            Puts the vessel on rails?
            </summary>
        </member>
        <member name="M:Vessel.SetWorldVelocity(Vector3d)">
            <summary>
            Sets the velocity of the vessel to a new value, instantaneously. May only work for loaded vessels?
            </summary>
            <param name="vel"></param>
        </member>
        <member name="P:Vessel.isActiveVessel">
            <summary>
            Whether the player is currently controlling this vessel.
            </summary>
        </member>
        <member name="P:Vessel.LandedOrSplashed">
            <summary>
            Landed || Splashed; use this to determined whether the vessel is on the ground somewhere, whether on land or water.
            </summary>
        </member>
        <member name="P:Vessel.mainBody">
            <summary>
            The body whose sphere of influence the vessel is currently in.
            </summary>
        </member>
        <member name="P:Vessel.orbit">
            <summary>
            The current orbit of the vessel. 
            </summary>
        </member>
        <member name="P:Vessel.Parts">
            <summary>
            A list of the parts this vessel is composed of.
            </summary>
        </member>
        <member name="P:Vessel.Item(System.Int32)">
            <summary>
            Presumably, this lets you access the vessel's parts by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Vessel.Situations">
            <summary>
            The type of Vessel.situation
            </summary>
        </member>
        <member name="F:Vessel.Situations.PRELAUNCH">
            <summary>
            Waiting on the launchpad, ready to be launched
            </summary>
        </member>
        <member name="F:Vessel.Situations.SUB_ORBITAL">
            <summary>
            On a collision course with the ground
            </summary>
        </member>
        <member name="F:Vessel.Situations.ESCAPING">
            <summary>
            On a hyperbolic trajectory
            </summary>
        </member>
        <member name="F:Part.ActivatesEvenIfDisconnected">
            <summary>
            Whether this part will actually activate if it schedule to be activated in the same stage as it 
            is decoupled from the rocket. In particular, sepratrons must have ActivatesEvenIfDisconnected set
            to true if they are to function properly.
            </summary>
        </member>
        <member name="F:Part.attachNodes">
            <summary>
            An AttachNode represents the link between two attached parts. attachNodes is a list of possible nodes to
            which other parts can be attached to this part. You can find the parts that actually are attached using
            AttachNode.attachedPart. 
            </summary>
        </member>
        <member name="F:Part.children">
            <summary>
            The parts that are children of this part in the part tree (parts that were attached to this part in the editor
            after this part was already part of the vessel).
            </summary>
        </member>
        <member name="F:Part.CrewCapacity">
            <summary>
            How many crew members this part can fit.
            </summary>
        </member>
        <member name="F:Part.dragModel">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:Part.dragModelType">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:Part.fuelCrossFeed">
            <summary>
            Whether this part allows fuel crossfeed.
            </summary>
        </member>
        <member name="F:Part.fuelLookupTargets">
            <summary>
            Seems to be always empty?
            </summary>
        </member>
        <member name="F:Part.inverseStage">
            <summary>
            The stage in which this part will activate, as shown in the staging display. (Possibly called inverseStage
            because the stages in KSP count down instead of up).
            </summary>
        </member>
        <member name="F:Part.mass">
            <summary>
            The DRY mass of this part, not including the mass of any resources it contains
            </summary>
        </member>
        <member name="F:Part.maximum_drag">
            <summary>
            The drag coefficient of this part is equal to (total mass) * (maximum_drag)
            </summary>
        </member>
        <member name="F:Part.maxTemp">
            <summary>
            The temperature at which this part will explode.
            </summary>
        </member>
        <member name="F:Part.minimum_drag">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:Part.NoCrossFeedNodeKey">
            <summary>
            Specifies the name of a node through which this part will NOT draw resources. See the part.cfg of the 
            stock tricoupler for an example of using this to prevent fuel from flowing backwards.
            </summary>
        </member>
        <member name="F:Part.OnEditorAttach">
            <summary>
            Add a function to this callback and it will be called when your part is attached to another part in the editor.
            </summary>
        </member>
        <member name="F:Part.OnEditorDestroy">
            <summary>
            Add a function to this callback and it will be called when your part is deleted in the editor.
            </summary>
        </member>
        <member name="F:Part.OnEditorDetach">
            <summary>
            Add a function to this callback and it will be called when your part is detached, or is part of a set of parts
            that are detached, in the editor.
            </summary>
        </member>
        <member name="F:Part.OnJustAboutToBeDestroyed">
            <summary>
            Add a function to this callback and it will be called when your part is about to be destroyed during flight.
            </summary>
        </member>
        <member name="F:Part.parent">
            <summary>
            The parent of this part in the part tree: the part to which this part was attached in the editor.
            </summary>
        </member>
        <member name="F:Part.partInfo">
            <summary>
            Some of the part info that is displayed about this part in the editor.
            </summary>
        </member>
        <member name="F:Part.physicalSignificance">
            <summary>
            If physicalSignificance == Part.PhysicalSignificance.NONE, then this part doesn't actually
            have any physics. In particular, it has no mass, regardless of what its "mass" field is set to, and no drag.
            </summary>
        </member>
        <member name="F:Part.PhysicsSignificance">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:Part.srfAttachNode">
            <summary>
            IF this part is surface-attached to its parent, srfAttachNode is the attach node describing this connection.
            </summary>
        </member>
        <member name="F:Part.stackIcon">
            <summary>
            The sicon shown for this part in the staging display.
            </summary>
        </member>
        <member name="F:Part.temperature">
            <summary>
            The temperature of this part, in some arbitrary units.
            </summary>
        </member>
        <member name="F:Part.vessel">
            <summary>
            The vessel to which this part belongs. Beware that vessel == null in the editor.
            </summary>
        </member>
        <member name="M:Part.AddModule(System.String)">
            <summary>
            Add a PartModule to this part. PartModules that are dynamically added to parts and don't exist in the original
            part.cfg will not be properly restored from persistence.
            </summary>
            <param name="moduleName">The class name of the PartModule to add, as a string</param>
            <returns>The added PartModule</returns>
        </member>
        <member name="M:Part.explode">
            <summary>
            Calling this causes the part to explode. But you guessed that, didn't you?
            </summary>
        </member>
        <member name="M:Part.findAttachNode(System.String)">
            <summary>
            Find an AttachNode by its name, as a string.
            </summary>
            <param name="nodeId">The name of the node to search for. The names of nodes are found in the part.cfg. For instance,
            node_stack_top describes a node with name "stack_top."</param>
            <returns>The AttachNode of the given name.</returns>
        </member>
        <member name="M:Part.force_activate">
            <summary>
            Activates the part now, regardless of when it was scheduled to be activated in the staging order.
            </summary>
        </member>
        <member name="M:Part.GetResourceMass">
            <summary>
            The total mass of the resources held by the part. The total mass of the part is <code>mass + GetResourceMass()</code>
            </summary>
            <returns>Total resource mass, in tonnes</returns>
        </member>
        <member name="P:Part.orbit">
            <summary>
            Don't use this; use Vessel.orbit instead.
            </summary>
        </member>
        <member name="P:Part.Resources">
            <summary>
            A list of the resources contained by this part. You can loop over them with
            <code>foreach(PartResource resource in part.Resources) { ... }</code>
            </summary>
        </member>
        <member name="P:Part.Rigidbody">
            <summary>
            The rigidbody of this part. See the Unity documentation on rigidbodies for more information.
            </summary>
        </member>
        <member name="F:Part.PhysicalSignificance.FULL">
            <summary>
            Part is a normal, physics-enabled part.
            </summary>
        </member>
        <member name="F:Part.PhysicalSignificance.NONE">
            <summary>
            Part has no physics, and in particular no mass or drag.
            </summary>
        </member>
        <member name="F:FlightCtrlState.fastThrottle">
            <summary>
            Unused?
            </summary>
        </member>
        <member name="F:FlightCtrlState.gearDown">
            <summary>
            Unused? Landing gear are lowered by sending an Event.
            </summary>
        </member>
        <member name="F:FlightCtrlState.gearUp">
            <summary>
            Unused? Landing gear are raised by sending an Event.
            </summary>
        </member>
        <member name="F:FlightCtrlState.headlight">
            <summary>
            Presumably, whether the EVA headlight is turned on.
            </summary>
        </member>
        <member name="F:FlightCtrlState.killRot">
            <summary>
            Whether SAS is turned on.
            </summary>
        </member>
        <member name="F:FlightCtrlState.mainThrottle">
            <summary>
            The throttle setting; this must be between 0 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.pitch">
            <summary>
            The pitch control input; this must be between -1 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.pitchTrim">
            <summary>
            Presumably, the pitch trim setting, i.e., the pitch input that will
            be given if no other input is given.
            </summary>
        </member>
        <member name="F:FlightCtrlState.roll">
            <summary>
            The roll control input; this must be between -1 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.rollTrim">
            <summary>
            Presumably, the roll trim setting, i.e., the roll input that will
            be given if no other input is given.
            </summary>
        </member>
        <member name="F:FlightCtrlState.X">
            <summary>
            The RCS x-axis control input.
            </summary>
        </member>
        <member name="F:FlightCtrlState.Y">
            <summary>
            The RCS y-axis control input.
            </summary>
        </member>
        <member name="F:FlightCtrlState.yaw">
            <summary>
            The yaw control input; this must be between -1 and 1.
            </summary>
        </member>
        <member name="F:FlightCtrlState.yawTrim">
            <summary>
            Presumably, the yaw trim input; i.e., the yaw input that will be
            given if no other input is given.
            </summary>
        </member>
        <member name="F:FlightCtrlState.Z">
            <summary>
            The RCS z-axis control input.
            </summary>
        </member>
        <member name="M:FlightCtrlState.CopyFrom(FlightCtrlState)">
            <summary>
            Presumably, copies the state of the FlightCtrlState st into this FlightCtrlState object.
            </summary>
            <param name="st"></param>
        </member>
        <member name="P:FlightCtrlState.isNeutral">
            <summary>
            Presumably, whether this flight control represents "neutral" controls, i.e., no input and zero throttle.
            </summary>
        </member>
        <member name="F:FlightInputHandler.fetch">
            <summary>
            Use this FlightInputHandler instance to access non-static members of the class.
            </summary>
        </member>
        <member name="F:FlightInputHandler.precisionMode">
            <summary>
            Presumably, whether precision mode is engaged.
            </summary>
        </member>
        <member name="F:FlightInputHandler.rcslock">
            <summary>
            Whether RCS is enabled.
            </summary>
        </member>
        <member name="F:FlightInputHandler.stageLock">
            <summary>
            Presumably, whether staging has been locked via Alt-L.
            </summary>
        </member>
        <member name="F:FlightInputHandler.state">
            <summary>
            The FlightCtrlState that represents player input. You can change the on-screen throttle
            by setting FlightCtrlState.state.mainThrottle.
            </summary>
        </member>
        <member name="M:FlightInputHandler.SetNeutralControls">
            <summary>
            Call this to set neutral controls; in particular this wil turn off the throttle.
            </summary>
        </member>
        <member name="P:FlightInputHandler.RCSLock">
            <summary>
            Whether RCS is enabled.
            </summary>
        </member>
        <member name="F:ScreenMessages.activeMessages">
            <summary>
            The set of currently active screen messages. This is a non-static member, but you can get a
            reference to the ScreenMessages instance via
            <code>ScreenMessages sm = (ScreenMessages)GameObject.FindObjectOfType(typeof(ScreenMessages));</code>
            </summary>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(ScreenMessage)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="msg">The message to post</param>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(System.String)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="message">The message to post.</param>
            <returns>A reference to the posted message</returns>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(System.String,System.Single)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="message">The message to post</param>
            <param name="duration">How long the message should remain on the screen, in seconds.</param>
            <returns>A reference to the posted message</returns>
        </member>
        <member name="M:ScreenMessages.PostScreenMessage(System.String,System.Single,ScreenMessageStyle)">
            <summary>
            Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message
            and the "Quicksaving..." message.
            </summary>
            <param name="message">The message to post</param>
            <param name="duration">How long the message should remain on the screen, in seconds.</param>
            <param name="style">Which style of screen message to post--for instance, should it by like the warp message, the quicksaving message, etc.</param>
            <returns>A reference to the posted message</returns>
        </member>
        <member name="M:ScreenMessages.RemoveMessage(ScreenMessage)">
            <summary>
            Remove a currently active message from the screen.
            </summary>
            <param name="msg">The message to remove</param>
        </member>
        <member name="F:ScreenMessageStyle.UPPER_CENTER">
            <summary>
            This results in a message in the same font and position as the "Warp = {number}x" message.
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.UPPER_LEFT">
            <summary>
            What sort of message style does this produce?
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.UPPER_RIGHT">
            <summary>
            This results in a message in the same font and position as the "Quicksaving..." message.
            </summary>
        </member>
        <member name="F:ScreenMessageStyle.LOWER_CENTER">
            <summary>
            What sort of message style does this produce?
            </summary>
        </member>
        <member name="P:EditorLogic.SortedShipList">
            <summary>
            A list of all parts in the vessel that is being edited.
            </summary>
        </member>
        <member name="F:ManeuverNode.DeltaV">
            <summary>
            The delta-V of the burn represented by this maneuver node, in m/s. NOTE: maneuver nodes use a special coordinate system for delta-V.
            The x-component of DeltaV represents the delta-V in the radial-plus direction. The y-component of DeltaV 
            represents the delta-V in the normal-minus direction. The z-component of DeltaV represents the delta-V in the
            prograde direction.
            </summary>
        </member>
        <member name="F:ManeuverNode.nextPatch">
            <summary>
            The orbit patch that starts at this maneuver node.
            </summary>
        </member>
        <member name="F:ManeuverNode.patch">
            <summary>
            The orbit patch that ends at this maneuver node?
            </summary>
        </member>
        <member name="F:ManeuverNode.UT">
            <summary>
            The universal time of the burn represented by this maneuver node.
            </summary>
        </member>
        <member name="M:ManeuverNode.GetBurnVector(Orbit)">
            <summary>
            Perhaps this translates the DeltaV vector into a world-space vector?
            </summary>
            <param name="currentOrbit"></param>
            <returns></returns>
        </member>
        <member name="M:ManeuverNode.OnGizmoUpdated(Vector3d,System.Double)">
            <summary>
            You can call this function to change the delta-V and time of a maneuver node.
            </summary>
            <param name="dV">The new delta-V. See the DeltaV for notes about the coordinate system used.</param>
            <param name="ut">The new universal time.</param>
        </member>
        <member name="F:PatchedConicSolver.maneuverNodes">
            <summary>
            A list of the maneuver nodes that are currently planned for this vessel.
            </summary>
        </member>
        <member name="M:PatchedConicSolver.AddManeuverNode(System.Double)">
            <summary>
            Add a maneuver node to the flight plan.
            </summary>
            <param name="UT">The universal time of the maneuver node.</param>
            <returns>A reference to the maneuver node</returns>
        </member>
        <member name="M:PatchedConicSolver.RemoveManeuverNode(ManeuverNode)">
            <summary>
            Remove a maneuver node from the flight plane.
            </summary>
            <param name="node">The maneuver node to be removed.</param>
        </member>
        <member name="F:Orbit.activePatch">
            <summary>
            Whether this patch actually represents a real orbit patch in the projected flight path. Often
            Orbit.nextPatch for the last real will not be null, but will be some sort of bogus Orbit object.
            You can recognize these because activePatch will be false.
            </summary>
        </member>
        <member name="F:Orbit.eccentricity">
            <summary>
            The eccentricity of the orbit.
            </summary>
        </member>
        <member name="F:Orbit.eccVec">
            <summary>
            A vector that points toward periapsis, with mangitude equal to the eccentricity.
            NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have
            to flip these back to get the vectors in world coordinates.
            </summary>
        </member>
        <member name="F:Orbit.EndUT">
            <summary>
            The universal time at which this patch ends.
            </summary>
        </member>
        <member name="F:Orbit.inclination">
            <summary>
            The inclination of this orbit with respect to the equator of the central body (in radians or degrees?)
            </summary>
        </member>
        <member name="F:Orbit.LAN">
            <summary>
            The longitude of the ascending node of the orbit (in what coordinate system?)
            </summary>
        </member>
        <member name="F:Orbit.period">
            <summary>
            The period of the orbit, in seconds.
            </summary>
        </member>
        <member name="F:Orbit.referenceBody">
            <summary>
            The body orbited.
            </summary>
        </member>
        <member name="F:Orbit.semiMajorAxis">
            <summary>
            The semi-major axis of the orbit, in meters. Equal to (PeR + ApR)/2
            </summary>
        </member>
        <member name="F:Orbit.timeToAp">
            <summary>
            The time until the object will reach apoapsis, in seconds.
            </summary>
        </member>
        <member name="F:Orbit.timeToPe">
            <summary>
            The time unti lthe object will reach periapsis, in seconds.
            </summary>
        </member>
        <member name="M:Orbit.GetOrbitNormal">
            <summary>
            A unit vector normal to the plane of the orbit. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have
            to flip these back to get the vectors in world coordinates.
            </summary>
            <returns>A unit normal vector.</returns>
        </member>
        <member name="M:Orbit.getRelativePositionAtUT(System.Double)">
            <summary>
            Gets the predicted displacement of the orbiting object from the center of the main
            body at a given universal time. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have
            to flip these back to get the vectors in world coordinates.
            </summary>
            <param name="UT">A univeral time.</param>
            <returns>Position relative to the main body (YZ flipped)</returns>
        </member>
        <member name="M:Orbit.GetVel">
            <summary>
            The current orbital velocity of the orbiting body. Unlike most other methods of the orbit
            class, the returned vector seems to already be in world coordinates and doesn't need to have
            its Y and Z axes flipped.
            </summary>
            <returns>Orbital velocity vector at current time.</returns>
        </member>
        <member name="M:Orbit.RadiusAtTrueAnomaly(System.Double)">
            <summary>
            The distance the orbiting object will be from the center of the main body when it reaches the given true anomaly.
            </summary>
            <param name="tA">True anomaly (in degrees or radians?)</param>
            <returns>Distance from the main body's center, in meters</returns>
        </member>
        <member name="M:Orbit.TrueAnomalyAtRadius(System.Double)">
            <summary>
            The true anomaly at which the orbiting object will achieve the given distance from the center of the main body.
            </summary>
            <param name="R">Distance from the center of the main body, in meters.</param>
            <returns>True anomaly, in radians.</returns>
        </member>
        <member name="M:Orbit.UpdateFromStateVectors(Vector3d,Vector3d,CelestialBody,System.Double)">
            <summary>
            Updates this orbit to reflect the orbit that will be taken around the given body by an object with the
            given position and velocity at the given universal time.
            </summary>
            <param name="pos">The initial position of the object RELATIVE TO refBody at UT (YZ flipped)</param>
            <param name="vel">The initial velocity of the object (YZ flipped)</param>
            <param name="refBody">The main body</param>
            <param name="UT">The universal time at which to start the orbit.</param>
        </member>
        <member name="P:Orbit.ApA">
            <summary>
            The apoapsis of the orbit in meters, measured from sea level.
            </summary>
        </member>
        <member name="P:Orbit.ApR">
            <summary>
            The apoapsis of the orbit in meters, measured from the center of the main body.
            </summary>
        </member>
        <member name="P:Orbit.PeA">
            <summary>
            The periapsis of the orbit in meters, measured from sea level.
            </summary>
        </member>
        <member name="P:Orbit.PeR">
            <summary>
            The periapsis of the orbit in meters, measured from the center of the main body.
            </summary>
        </member>
    </members>
</doc>
